<?php
/**
 * @file
 * Panelizer tests.
 */

/**
 * Verifies Panelizer configuration options for user entities.
 */
class PanelizerUserTest extends PanelizerTestHelper {

  protected $admin_user;

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'Panelizer user workflow (excluding IPE)',
      'description' => 'Test the typical workflow of working with users, excluding IPE.',
      'group' => 'Panelizer',
    );
  }

  /**
   * {@inheritdoc}
   */
  function setUp(array $modules = array()) {
    parent::setUp();

    // Create a user with the necessary permissions.
    $perms = array(
      // Master permission for all Panelizer operations.
      'administer panelizer',

      // Full control over this entity.
      'administer users',
    );
    $this->admin_user = $this->drupalCreateUser($perms);
    $this->drupalLogin($this->admin_user);
  }

  /**
   * Test the user configuration functionality.
   */
  function testUserConfiguration() {
    // Load the users settings page.
    $this->drupalGet('admin/config/people/accounts');
    $this->assertResponse(200);

    // Confirm that the appropriate fields are present.
    $this->assertFieldByName('panelizer[status]');
    $this->assertFieldByName('panelizer[help]');
    foreach (array('page_manager', 'default') as $view_mode) {
      $this->assertFieldByName('panelizer[view modes][' . $view_mode . '][status]');
      $this->assertFieldByName('panelizer[view modes][' . $view_mode . '][default]');
      $this->assertFieldByName('panelizer[view modes][' . $view_mode . '][choice]');
    }

    // Submit the form to panelize the user entity. Because this form handles a
    // great many other options, need to load all of those variables and submit
    // them too.
    $edit = array(
      // Enable Panelzier.
      'panelizer[status]' => TRUE,
      'panelizer[view modes][page_manager][status]' => TRUE,
      'panelizer[view modes][page_manager][default]' => TRUE,

      // All of the other options.
      'anonymous' => variable_get('anonymous', 'anonymous'),
      'user_admin_role' => variable_get('user_admin_role', 3),
      'user_register' => variable_get('user_register', 0),
      'user_email_verification' => variable_get('user_email_verification', TRUE),
      'user_cancel_method' => variable_get('user_cancel_method', 'user_cancel_block'),
      'user_signatures' => variable_get('user_signatures', FALSE),
      'user_pictures' => variable_get('user_pictures', TRUE),
      'user_picture_path' => variable_get('user_picture_path', 'pictures'),
      'user_picture_default' => variable_get('user_picture_default', ''),
      'user_picture_style' => variable_get('user_picture_style', 'thumbnail'),
      'user_picture_dimensions' => variable_get('user_picture_dimensions', '1024x1024'),
      'user_picture_file_size' => variable_get('user_picture_file_size', '800'),
      'user_picture_guidelines' => variable_get('user_picture_guidelines', ''),
      'user_mail_cancel_confirm_body' => variable_get('user_mail_cancel_confirm_body', ''),
      'user_mail_cancel_confirm_subject' => variable_get('user_mail_cancel_confirm_subject', ''),
      'user_mail_password_reset_body' => variable_get('user_mail_password_reset_body', ''),
      'user_mail_password_reset_subject' => variable_get('user_mail_password_reset_subject', ''),
      'user_mail_register_admin_created_body' => variable_get('user_mail_register_admin_created_body', ''),
      'user_mail_register_admin_created_subject' => variable_get('user_mail_register_admin_created_subject', ''),
      'user_mail_register_no_approval_required_body' => variable_get('user_mail_register_no_approval_required_body', ''),
      'user_mail_register_no_approval_required_subject' => variable_get('user_mail_register_no_approval_required_subject', ''),
      'user_mail_register_pending_approval_body' => variable_get('user_mail_register_pending_approval_body', ''),
      'user_mail_register_pending_approval_subject' => variable_get('user_mail_register_pending_approval_subject', ''),
      'user_mail_status_activated_body' => variable_get('user_mail_status_activated_body', ''),
      'user_mail_status_activated_notify' => variable_get('user_mail_status_activated_notify', 1),
      'user_mail_status_activated_subject' => variable_get('user_mail_status_activated_subject', ''),
      'user_mail_status_blocked_body' => variable_get('user_mail_status_blocked_body', ''),
      'user_mail_status_blocked_notify' => variable_get('user_mail_status_blocked_notify', 0),
      'user_mail_status_blocked_subject' => variable_get('user_mail_status_blocked_subject', ''),
      'user_mail_status_canceled_body' => variable_get('user_mail_status_canceled_body', ''),
      'user_mail_status_canceled_notify' => variable_get('user_mail_status_canceled_notify', 0),
      'user_mail_status_canceled_subject' => variable_get('user_mail_status_canceled_subject', ''),
    );
    $this->drupalPost(NULL, $edit, t('Save configuration'));
    $this->assertResponse(200);

    // Confirm the settings saved correctly.
    $pm_links = array(
      '!pm' => l('Page Manager', 'admin/structure/pages'),
      '!panels' => l('Panels', 'admin/structure/panels'),
      '!task_name' => 'user_view',
      '!entity_type' => 'user',
    );
    $this->assertText(strip_tags(t('Note: "!task_name" display must be enabled in !pm in order for the !entity_type full page display ("Full page override") to work correctly.', $pm_links)));
    $this->assertText(t('The configuration options have been saved.'));

    // Verify the user can be panelized.
    $this->drupalGet('user/' . $this->admin_user->uid);
    $this->assertResponse(200);
    $this->assertLink('Customize display', 0, 'The "Customize display" link appears on the page');
    $this->assertLinkByHref('user/' . $this->admin_user->uid . '/panelizer', 0, 'A link to customize the user page display appears on the page');

    // Check that the view mode has not been panelized yet.
    $elements = $this->xpath('//div[contains(@class,:class)]', array(':class' => 'panelizer-view-mode'));
    $this->assertEqual(count($elements), 0, 'The user object display is not panelized yet.');
    $this->assertText(t('Member for'));

    // Enable the Page Manager handler for the user_view display.
    variable_set('page_manager_user_view_disabled', FALSE);

    drupal_flush_all_caches();

    // Check that the view mode has now been panelized.
    $this->drupalGet('user/' . $this->admin_user->uid);
    $this->assertResponse(200);
    $this->assertLink('Customize display', 0, 'The "Customize display" link appears on the page');
    $this->assertLinkByHref('user/' . $this->admin_user->uid . '/panelizer', 0, 'A link to customize the user page display appears on the page');
    $this->assertNoText(t('Member for'));
    // This won't be available because there's no default display for the user
    // entity.
    // $elements = $this->xpath('//div[contains(@class,:class)]', array(':class' => 'panelizer-view-mode'));
    // $this->assertEqual(count($elements), 1, 'The user object display is now panelized.');
  }

  /**
   * Confirm that individual objects can be panelized.
   */
  function testUserPanelizeIt() {
    $this->togglePanelizer('user', 'user', 1, 0, 0, 'default');

    // Check that the view mode can be panelized.
    $this->drupalGet('user/' . $this->admin_user->uid . '/panelizer');
    $this->assertResponse(200);
    $this->assertText('Default');
    $this->assertLink('panelize', 0, 'The panelize link for the default view mode appears on the page');
    $this->assertLinkByHref('user/' . $this->admin_user->uid . '/panelizer/default', 0, 'A link to panelize the default view mode appears on the page');

    // Verify that the view mode is not currently panelized.
    $this->drupalGet('user/' . $this->admin_user->uid . '/panelizer/default');
    $this->assertResponse(200);
    $this->assertRaw(t('This %entity is not currently panelized.', array('%entity' => 'User')));

    // Panelize the view mode.
    $this->drupalPost(NULL, array(), t('Panelize it!'));
    $this->assertResponse(200);

    // Check that the view mode has been panelized.
    $this->drupalGet('user/' . $this->admin_user->uid);
    $this->assertResponse(200);
    $this->assertNoText(t('Member for'), 'The user is panelized');

    // This won't be available because there's no default display for the user
    // entity.
    // $elements = $this->xpath('//div[contains(@class,:class)]', array(':class' => 'panelizer-view-mode'));
    // $this->assertEqual(count($elements), 1, 'The user is panelized.');
  }

  /**
   *
   */
  // function testUserPanelsDefault() {
  //   $this->enableVocabPanelizer(1, 1);
  //   $term = $this->createTestTerm();
  //
  //   // Verify that the view mode has a default panel.
  //   $this->drupalGet('admin/structure/taxonomy/panelizer_vocabulary/panelizer');
  //   $this->assertResponse(200);
  //   $this->assertLinkByHref('admin/structure/taxonomy/panelizer_vocabulary/panelizer/default', 0, 'User is able to provide default panel for default');
  //
  //   $edit = array();
  //   $edit['layout'] = 'twocol_bricks';
  //   $this->drupalPost('admin/structure/taxonomy/panelizer_vocabulary/panelizer/default/layout', $edit, t('Save'));
  //
  //   // Check that the layout has been set.
  //   $this->drupalGet('taxonomy/term/' . $term->tid);
  //   $this->assertResponse(200);
  //   $elements = $this->xpath('//div[contains(@class,:class)]', array(':class' => 'panel-2col-bricks'));
  //   $this->assertEqual(count($elements), 1, 'The default term layout has been set.');
  // }

}
