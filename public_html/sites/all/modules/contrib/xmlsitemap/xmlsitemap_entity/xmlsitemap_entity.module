<?php
/**
 * @file
 * Integrate custom entities with XML sitemap
 */

/**
 * Implements hook_menu_alter().
 */
function xmlsitemap_entity_menu_alter(&$items) {
  $items['admin/config/search/xmlsitemap/settings/%xmlsitemap_link_bundle/%']['access callback'] = 'xmlsitemap_entity_link_bundle_access';
}

/**
 * Implements hook_cron().
 */
function xmlsitemap_entity_cron() {
  xmlsitemap_entity_xmlsitemap_index_links(xmlsitemap_var('batch_limit'));
}

/**
 * Implements hook_entity_info_alter().
 */
function xmlsitemap_entity_entity_info_alter(array &$entity_info) {
  foreach ($entity_info as &$info) {
    // Skip entities that shouldn't be handled by this module.
    if (isset($info['xmlsitemap']) && $info['xmlsitemap'] == FALSE) {
      unset($info['xmlsitemap']);
      continue;
    }
    elseif (isset($info['xmlsitemap']['process callback'])) {
      continue;
    }

    // Check if this type of entity can be indexed.
    $indexable = (isset($info['entity keys']['id']) && isset($info['uri callback']) && isset($info['access callback']));

    if ($indexable) {
      // The default Entity API uri callback is ignored unless it has been
      // overridden in the child class, this is checked using reflection.
      if ($info['uri callback'] == 'entity_class_uri') {
        $indexable = FALSE;

        if (isset($info['entity class']) && $info['entity class'] != 'Entity') {
          $class = new ReflectionClass($info['entity class']);
          $default_uri = $class->getMethod('defaultUri')->getDeclaringClass()->getName();
          $uri = $class->getMethod('uri')->getDeclaringClass()->getName();

          if (in_array($info['entity class'], array($default_uri, $uri))) {
            $indexable = TRUE;
          }
        }
      }

      if ($indexable) {
        if (!isset($info['xmlsitemap']) || !is_array($info['xmlsitemap'])) {
          $info['xmlsitemap'] = array();
        }

        // Set a bundle label.
        $info += array(
          'bundle label' => (isset($info['entity keys']['bundle']) ? t('Bundle') : $info['label']),
        );

        // Add the XML sitemap info.
        $info['xmlsitemap'] += array(
          'use entity module' => TRUE,
          'changed property' => NULL,
          'process callback' => 'xmlsitemap_entity_xmlsitemap_process_entity_links',
        );
      }
    }

    if (!$indexable && isset($info['xmlsitemap'])) {
      unset($info['xmlsitemap']);
    }
  }
}

/**
 * Implements hook_xmlsitemap_link_info_alter().
 */
function xmlsitemap_entity_xmlsitemap_link_info_alter(&$link_info) {
  foreach ($link_info as &$info) {
    if (!empty($info['bundles']) && !empty($info['xmlsitemap']['use entity module'])) {
      foreach ($info['bundles'] as &$bundle) {
        if (isset($bundle['admin'])) {
          $admin = $bundle['admin'];
          if (!isset($admin['access callback']) && !isset($admin['access arguments'])) {
            unset($bundle['admin']);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function xmlsitemap_entity_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form_state['entity_type']) && isset($form_state[$form_state['entity_type']])) {
    if (isset($form_state['op']) && in_array($form_state['op'], array('add', 'create', 'edit', 'update'))) {
      $info = entity_get_info($form_state['entity_type']);

      if (!empty($info['xmlsitemap']['use entity module'])) {
        list($entity_id, , $bundle) = entity_extract_ids($form_state['entity_type'], $form_state[$form_state['entity_type']]);

        form_load_include($form_state, 'inc', 'xmlsitemap', 'xmlsitemap.admin');
        xmlsitemap_add_form_link_options($form, $form_state['entity_type'], $bundle, $entity_id);
      }
    }
  }
}

/**
 * Implements hook_entity_insert().
 */
function xmlsitemap_entity_entity_insert($entity, $entity_type) {
  $info = entity_get_info($entity_type);

  if (!empty($info['xmlsitemap']['use entity module'])) {
    _xmlsitemap_entity_xmlsitemap_update_link($entity_type, $entity);
  }
}

/**
 * Implements hook_entity_update().
 */
function xmlsitemap_entity_entity_update($entity, $entity_type) {
  $info = entity_get_info($entity_type);

  if (!empty($info['xmlsitemap']['use entity module'])) {
    _xmlsitemap_entity_xmlsitemap_update_link($entity_type, $entity);
  }
}

/**
 * Implements hook_entity_delete().
 */
function xmlsitemap_entity_entity_delete($entity, $entity_type) {
  $info = entity_get_info($entity_type);

  if (!empty($info['xmlsitemap']['use entity module'])) {
    list($entity_id) = entity_extract_ids($entity_type, $entity);
    xmlsitemap_link_delete($entity_type, $entity_id);
  }
}

/**
 * Sitemap bundle settings access callback.
 *
 * @param $entity_data
 *   The entity type specific sitemap info.
 *
 * @return
 *   TRUE if the current user may access the sitemap bundle settings.
 */
function xmlsitemap_entity_link_bundle_access($entity_data) {
  $access = xmlsitemap_link_bundle_access($entity_data);

  if (!$access) {
    $bundle = xmlsitemap_link_bundle_load($entity_data['entity'], $entity_data['bundle']);

    if (!isset($bundle['info']['admin'])) {
      $access = user_access('administer xmlsitemap');
    }
  }

  return $access;
}

/**
 * Implements hook_xmlsitemap_index_links().
 */
function xmlsitemap_entity_xmlsitemap_index_links($limit) {
  foreach (entity_get_info() as $entity_type => $info) {
    if (!empty($info['xmlsitemap']['use entity module'])) {
      $bundles = xmlsitemap_get_link_type_enabled_bundles($entity_type);

      if ($bundles) {
        $query = db_select($info['base table'], 'e')
          ->fields('e', array($info['entity keys']['id']))
          ->isNull('s.id')
          ->orderBy('e.' . $info['entity keys']['id'], 'DESC')
          ->range(0, $limit);
        $query->leftJoin('xmlsitemap', 's', 'e.' . $info['entity keys']['id'] . ' = s.id AND s.type = :type', array(
          ':type' => $entity_type,
        ));

        if (!empty($info['entity keys']['bundle'])) {
          $query->condition('e.' . $info['entity keys']['bundle'], $bundles);
        }

        $ids = $query->execute()->fetchCol();

        if ($ids) {
          xmlsitemap_entity_xmlsitemap_process_entity_links($ids, array('entity_type' => $entity_type));
        }
      }
    }
  }
}

/**
 * Create and save the sitemap link for a batch of entities.
 *
 * @param $entity_ids
 *   An array of entity ids.
 * @param $entity_type
 *   The entity type.
 */
function xmlsitemap_entity_xmlsitemap_process_entity_links(array $entity_ids, $data) {
  $entities = entity_load($data['entity_type'], $entity_ids);

  foreach ($entities as $entity) {
    _xmlsitemap_entity_xmlsitemap_update_link($data['entity_type'], $entity);
  }
}

/**
 * Create and save the sitemap link for an entity.
 *
 * @param $entity_type
 *   The entity type.
 * @param $entity
 *   The entity object.
 */
function _xmlsitemap_entity_xmlsitemap_update_link($entity_type, $entity) {
  list($entity_id, , $bundle) = entity_extract_ids($entity_type, $entity);

  // Try to load the existing sitemap link.
  if (!isset($entity->xmlsitemap)) {
    $entity->xmlsitemap = array();

    if ($link = xmlsitemap_link_load($entity_type, $entity_id)) {
      $entity->xmlsitemap = $link;
    }
  }

  // Get the entity type info and bundle settings.
  $info = entity_get_info($entity_type);
  $settings = xmlsitemap_link_bundle_load($entity_type, $bundle);

  // Get the entity URI and changed timestamp.
  $uri = entity_uri($entity_type, $entity);
  $changed = REQUEST_TIME;

  if (array_key_exists('changed property', $info['xmlsitemap'])) {
    if (isset($info['xmlsitemap']['changed property'])) {
      $changed = $entity->{$info['xmlsitemap']['changed property']};
    }
  }
  elseif (isset($entity->changed)) {
    $changed = $entity->changed;
  }
  elseif (isset($entity->updated)) {
    $changed = $entity->updated;
  }

  // Add some sitemap properties.
  $entity->xmlsitemap += array(
    'id' => $entity_id,
    'type' => $entity_type,
    'subtype' => $bundle,
    'status' => $settings['status'],
    'status_default' => $settings['status'],
    'status_override' => 0,
    'priority' => $settings['priority'],
    'priority_default' => $settings['priority'],
    'priority_override' => 0,
  );

  // Force override some properties.
  $entity->xmlsitemap['loc'] = $uri['path'];
  $entity->xmlsitemap['access'] = entity_access('view', $entity_type, $entity, drupal_anonymous_user());
  $entity->xmlsitemap['language'] = (isset($entity->language) ? $entity->language : LANGUAGE_NONE);
  $entity->xmlsitemap['lastmod'] = $changed;

  xmlsitemap_link_save($entity->xmlsitemap);
}
