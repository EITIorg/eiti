<?php

/**
 * @file
 * Expose custom libraries and plugins.
 */

/**
 * Implements hook_ctools_plugin_directory().
 *
 * @inheritdoc
 */
function eiti_ctools_extra_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'contentwidget' && $plugin_type == 'predefined_widgets') {
    return 'plugins/' . $plugin_type;
  }

  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/' . $plugin_type;
  }

  return NULL;
}

/**
 * Implements hook_libraries_info().
 *
 * @inheritdoc
 */
function eiti_ctools_extra_libraries_info() {
  $libraries['eitiChartWidgets'] = array(
    'title' => 'EITI Chart Widgets Library',
    'version' => '1.0',
    'files' => array(
      'js' => array(
        'js/chartWidgets.js' => array(
          'defer' => TRUE,
          'preprocess' => FALSE,
          'scope' => 'footer',
        ),
      ),
      'css' => array(
        'css/chartWidgets.css' => array(
          'preprocess' => FALSE,
        ),
      ),
    ),

    'variants' => array(
      'minified' => array(
        'files' => array(
          'js' => array(
            'js/chartWidgets.min.js' => array(
              'defer' => TRUE,
              'preprocess' => FALSE,
              'scope' => 'footer',
            ),
          ),
          'css' => array(
            'css/chartWidgets.css' => array(
              'preprocess' => FALSE,
            ),
          ),
        ),
      ),
    ),
  );

  $libraries['eitiMapWidgets'] = array(
    'title' => 'EITI Map Widgets Library',
    'version arguments' => array(
      'file' => 'RELEASE.txt',
      'pattern' => '/([\d\-]+)/',
      'lines' => 1,
    ),
    'files' => array(
      'js' => array(
        'js/mapWidgets.js' => array(
          'defer' => TRUE,
          'preprocess' => FALSE,
          'scope' => 'footer',
        ),
      ),
      'css' => array(
        'css/mapWidgets.css' => array(
          'preprocess' => FALSE,
        ),
        'css/leaflet.css' => array(
          'preprocess' => FALSE,
        ),
      ),
    ),

    'variants' => array(
      'minified' => array(
        'files' => array(
          'js' => array(
            'js/mapWidgets.min.js' => array(
              'defer' => TRUE,
              'preprocess' => FALSE,
              'scope' => 'footer',
            ),
          ),
          'css' => array(
            'css/mapWidgets.css' => array(
              'preprocess' => FALSE,
            ),
            'css/leaflet.css' => array(
              'preprocess' => FALSE,
            ),
          ),
        ),
      ),
    ),
  );

  $libraries['plotly'] = array(
    'title' => 'Plotly',
    'version arguments' => array(
      'file' => 'plotly.js',
      'pattern' => '/plotly.js\s+v?([\d\.]+)/',
      'lines' => 3,
    ),
    'files' => array(
      'js' => array(
        'plotly.js',
      ),
    ),
    'variants' => array(
      'minified' => array(
        'js' => array(
          'plotly.min.js',
        ),
      ),
    ),
  );

  $libraries['select2'] = array(
    'title' => 'Select2',
    'description' => 'The jQuery replacement for select boxes',
    'version arguments' => array(
      'file' => 'dist/js/select2.js',
      'pattern' => '/Select2\s+v?([\d\.]+)/',
      'lines' => 3,
    ),
    'files' => array(
      'js' => array(
        'dist/js/select2.js',
      ),
      'css' => array(
        'dist/css/select2.css',
      ),
    ),
    'variants' => array(
      'minified' => array(
        'js' => array(
          'dist/js/select2.min.js',
        ),
        'css' => array(
          'dist/css/select2.min.css',
        ),
      ),
    ),
  );

  return $libraries;
}


/**
 * Helper function for libraries_load(). Helps deal with URLs used inside the library.
 *
 * @TODO: Update the libraries to work without this extra info.
 *
 * @param $name
 * @return boolean
 */
function eiti_ctools_extra_load_eiti_libraries($name, $variant = NULL) {
  static $loaded_libraries = array();

  if (!isset($loaded_libraries[$name])) {
    $loaded_libraries[$name] = libraries_load($name, $variant);
    if (!empty($loaded_libraries[$name]['library path'])) {
      $js_data = array(
        'eitiMapWidgetsLibPath' => $loaded_libraries[$name]['library path'],
      );
      drupal_add_js($js_data, array('type' => 'setting'));
    }
  }

  return $loaded_libraries[$name];
}

/**
 * Form constructor for the Quick Summary Tool form.
 *
 * @TODO: Currently the form only works via API; for fix: views_exposed_form_cache()
 *
 * @param $form
 * @param $form_state
 *
 * @return array
 */
function eiti_ctools_extra__quick_summary_tool__form($form, &$form_state) {
  $form = array(
    '#type' => 'container',
    '#attributes' => array(
      'autocomplete' => 'off',
      'id' => 'quick-summary-tool--form',
      'class' => array(
        'quick-summary-tool--form',
        'container-inline-block',
        'single-fluid-row-wrapper',
      ),
    ),
  );

  // Load the library.
  libraries_load('select2', 'minified');
  $module_path = drupal_get_path('module', 'eiti_ctools_extra');
  drupal_add_js($module_path . '/scripts/eiti_ctools_extra.select.js');

  $selected_countries = NULL;
  if (isset($form_state['input']['countries'])) {
    $selected_countries = $form_state['input']['countries'];
  }

  // Get a list of Implementing Countries that have summary data files.
  $query = db_select('eiti_implementing_country', 'ic');
  $query->innerJoin('eiti_summary_data', 'sd', 'ic.id = sd.country_id');
  $query
    ->fields('ic', array('id', 'name'))
    ->orderBy('ic.name')
    ->groupBy('ic.id')
    ->condition('ic.status', 1);

  $country_options = $query->execute()
    ->fetchAllKeyed();

  // Translate Country Names.
  $countries = entity_load('implementing_country', array_keys($country_options));
  foreach ($country_options as $country_id => &$country_name) {
    if (empty($countries[$country_id])) {
      continue;
    }

    $country_name = entity_label('implementing_country', $countries[$country_id]);
  }

  // Sort the countries by the translated names.
  asort($country_options);

  $form['countries'] = array(
    '#type' => 'select',
    '#title' => t('Countries'),
    '#title_display' => 'invisible',
    '#required' => TRUE,
    '#value' => $selected_countries,
    '#options' => $country_options,
    '#ajax' => array(
      'callback' => 'eiti_ctools_extra__quick_summary_tool__country_callback',
    ),
    '#multiple' => TRUE,
    '#attributes' => array(
      'style' => 'width: 19em;',  // Used by Select2.
      'data-placeholder' => t('Countries'),
      'class' => array(
        'jquery-select2-enabled',
      ),
    ),
  );

  $year_options = array();
  if (!empty($selected_countries)) {
    // Now let's make the query.
    $query = db_select('eiti_summary_data', 'sd');
    $query->addExpression("DATE_PART('year', TO_TIMESTAMP(sd.year_end))", 'year');
    $query->condition('status', 1)
      ->condition('country_id', $selected_countries, 'IN')
      ->groupBy('year');

    // @TODO: Translate labels using entity_load() && entity_label()?!
    $year_options = $query->execute()
      ->fetchAllKeyed(0, 0);

    ksort($year_options);
  }

  $form['years'] = array(
    '#type' => 'select',
    '#title' => t('Years'),
    '#title_display' => 'invisible',
    '#options' => $year_options,
    '#disabled' => empty($year_options),
    '#multiple' => TRUE,
    '#attributes' => array(
      'id' => 'quick-summary-tool--form-years',
      'data-placeholder' => t('Years'),
      'style' => 'width: 19em;',  // Used by Select2.
      'class' => array(
        'jquery-select2-enabled',
      ),
    ),
  );

  if (empty($year_options)) {
    $form['years']['#disabled'] = TRUE;
  }
  else {
    $form['years']['#required'] = TRUE;
  }

  $form['actions'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array(
        'form-item',
      ),
    ),
  );

  $form['actions']['next'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#attributes' => array(
      'class' => array(
        'form-item',
      ),
    ),
    '#ajax' => array(
      'callback' => 'eiti_ctools_extra__quick_summary_tool__submit_callback',
    ),
  );

  $form['actions']['cancel'] = array(
    '#type' => 'link',
    '#title' => t('Reset'),
    '#href' => url($_GET['q']),
  );

  return $form;
}

/**
 * Ajax callback triggered by select.
 */
function eiti_ctools_extra__quick_summary_tool__country_callback($form, $form_state) {
  $commands = array();

  $commands[] = ajax_command_replace('#quick-summary-tool--form .form-item-years', drupal_render($form['years']));

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Ajax callback triggered by select.
 */
function eiti_ctools_extra__quick_summary_tool__submit_callback($form, $form_state) {
  $commands = array();
  $commands['clear'] = ajax_command_html('.quick-summary-tool--information-placeholder', '');

  $countries = $form_state['values']['countries'];
  if (empty($countries)) {
    return $commands;
  }
  $countries = drupal_map_assoc($countries);

  $years = $form_state['values']['years'];
  if (empty($years)) {
    return $commands;
  }
  $years = drupal_map_assoc($years);

  // Now let's make the query.
  $query = db_select('eiti_summary_data', 'sd');
  $query->fields('sd', array('id'));
  $query->condition('status', 1);
  $query->condition('country_id', $countries);
  $query->where("DATE_PART('year', TO_TIMESTAMP(sd.year_end)) IN (:years)", array(':years' => $years));

  // @TODO: Translate labels using entity_load() && entity_label()?!
  $summary_data_entities = $query->execute()
    ->fetchAllAssoc(0, 0);

  if (empty($summary_data_entities)) {
    return $commands;
  }

  if (count($countries) == 1 && count($years) == 1) {
    $entity_id = key($summary_data_entities);
    $entity = entity_load_single('summary_data', $entity_id);
    if (empty($entity)) {
      return $commands;
    }

    $info[$entity_id] = entity_view('summary_data', array($entity_id => $entity), 'full');
  }
  else if (count($summary_data_entities) > 1) {
    $info[] = eiti_ctools_extra__quick_summary_tool__quick_summary_table(array_keys($summary_data_entities));
  }

  if (!empty($info)) {
    unset($commands['clear']);
    $commands[] = ajax_command_html('.quick-summary-tool--information-placeholder', drupal_render($info));
  }

  return array('#type' => 'ajax', '#commands' => $commands);
}

function eiti_ctools_extra__quick_summary_tool__quick_summary_table($ids) {
  $entity_type = 'summary_data';

  // GEt information about properties and fields.
  $property_info = entity_get_property_info($entity_type);
  $properties = $property_info['properties'];
  $properties += $property_info['bundles']['summary_data']['properties'];

  // Prepare the table header.
  $header = array();
  $header[] = check_plain($properties['year_end']['label']);
  $header[] = check_plain($properties['sectors_covered']['label']);
  $header[] = check_plain($properties['field_sd_no_reporting_com']['label']);
  $header[] = check_plain($properties['gov_revenue_extractive']['label']);
  $header[] = check_plain($properties['field_sd_report_file']['label']);
  $header[] = check_plain($properties['field_sd_file_links']['label']);

  // Prepare the table rows.
  $rows = array();
  foreach (entity_load($entity_type, $ids) as $entity) {
    $wrapper = entity_metadata_wrapper($entity_type, $entity);

    $row_data = array();
    $row_data[] = $wrapper->year_end->value();
    $row_data[] = $wrapper->sectors_covered->value();
    $row_data[] = $wrapper->field_sd_no_reporting_com->value();

    // Government revenue is a separate case, we want to have a soft-calculated fallback.
    $gov_revenue = $wrapper->gov_revenue_extractive->value();
    if ($gov_revenue == 'N/A') {
      $gov_revenue = $wrapper->gov_revenue_calculated->value();
    }
    $row_data[] = $gov_revenue;

    if ($wrapper->field_sd_report_file->value()) {
      $field_view_field = field_view_field($entity_type, $entity, 'field_sd_report_file');
      $field_view_field['#label_display'] = 'hidden';
      $row_data[] = drupal_render($field_view_field);
    }
    else {
      $row_data[] = '';
    }

    if ($wrapper->field_sd_file_links->value()) {
      $field_view_field = field_view_field($entity_type, $entity, 'field_sd_file_links');
      $field_view_field['#label_display'] = 'hidden';
      $row_data[] = drupal_render($field_view_field);
    }
    else {
      $row_data[] = '';
    }

    $rows[] = $row_data;
  }

  $table = array(
    '#type' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#empty' => t('No content available.'),
    '#attributes' => array(
      'class' => array(
        'quick-summary-tool--table',
      ),
    ),
  );

  return $table;
}
