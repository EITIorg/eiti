<?php
/**
 * @file
 * Exposes a custom entity to store score data.
 */

/**
 * Define administrative URLs.
 */
define('EITIENTITY_SCOREDATA_UI_PATH', 'score_data');
define('EITIENTITY_SCOREDATA_ADMIN_UI_PATH', 'admin/content/score_data');
define('EITIENTITY_SCOREDATA_BUNDLE_ADMIN_UI_PATH', 'admin/structure/score_data');

/**
 * Date format for score_data entities.
 */
define('EITIENTITY_SCOREDATA_DATE_FORMAT', 'Y-m-d');

/**
 * Implements hook_entity_info().
 *
 * @return array
 */
function eitientity_score_data_entity_info() {
  $entity_info = array();

  $menu_wildcard = '%score_data';
  $entity_info['score_data'] = array(
    'label' => t('Validation Data'),
    'plural label' => t('Validation Data'),
    'description' => t('Validation Data represents a single validation data report.'),

    'base table' => 'eiti_score_data',
    'module' => 'eitientity_score_data',

    'entity class' => 'ScoreDataEntity',
    'controller class' => 'EntityAPIController',
    'extra fields controller class' => 'ScoreDataExtraFieldsController',
    'metadata controller class' => 'ScoreDataMetadataController',

    'static cache' => FALSE,
    'fieldable' => TRUE,

    'access callback' => 'eitientity_score_data_access',
    'uri callback' => 'entity_class_uri',
    'label callback' => 'eitientity_score_data_label',

    'entity keys' => array(
      'id' => 'id',
      'bundle' => 'type',
    ),

    'bundles' => array(),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'bundles callback' => 'eitientity_score_data_get_types',

    'admin ui' => array(
      'path' => EITIENTITY_SCOREDATA_ADMIN_UI_PATH,
      'entity path' => EITIENTITY_SCOREDATA_UI_PATH,
      'bundle path' => EITIENTITY_SCOREDATA_BUNDLE_ADMIN_UI_PATH,
      'controller class' => 'ScoreDataEntityUIController',
      'menu wildcard' => $menu_wildcard,
      'file' => 'eitientity_score_data.admin.inc',
    ),
  );

  foreach ($entity_info['score_data']['bundles callback']() as $type => $bundle_info) {
    $entity_info['score_data']['bundles'][$type] = array(
      'label' => $bundle_info['label'],
      'admin' => array(
        'path' => EITIENTITY_SCOREDATA_BUNDLE_ADMIN_UI_PATH . '/manage/' . $type,
      ),
    );
  }

  return $entity_info;
}

/**
 * Menu loader function: load score data from its path.
 *
 * @see entity_object_load()
 *
 * @param $entity_id
 * @param $entity_type
 * @return FALSE|ScoreDataEntity
 */
function score_data_load($entity_id, $entity_type) {
  return entity_object_load($entity_id, $entity_type);
}

/**
 * Returns the label callback.
 *
 * @param ScoreDataEntity $entity
 * @param $entity_type
 *
 * @return string
 */
function eitientity_score_data_label($entity, $entity_type) {
  $t_args = array();

  if (!is_null($entity->country_id)) {
    $country_entity = entity_load_single('implementing_country', $entity->country_id);
    if ($country_entity) {
      $t_args['!country'] = entity_label('implementing_country', $country_entity);
    }
  }

  if (empty($t_args['!country'])) {
    return '';
  }

  $t_args['!year'] = '';
  if (!is_null($entity->year)) {
    $t_args['!year'] = $entity->year;
  }

  return t('!country: !year', $t_args);
}

/**
 * Returns a list of score_data types.
 *
 * @return array
 */
function eitientity_score_data_get_types() {
  $items = array();

  $items['standard'] = array(
    'label' => t('Standard'),
    'description' => t('Validation Data represent a single report.'),
  );

  return $items;
}

/**
 * Returns the entity type name.
 *
 * @param $bundle
 * @return false|string
 */
function eitientity_score_data_type_get_name($bundle) {
  $bundles = eitientity_score_data_get_types();
  return (isset($bundles[$bundle]['label'])) ? $bundles[$bundle]['label'] : FALSE;
}

/**
 * Access callback for custom score_data entities.
 *
 * @param $op
 * @param ScoreDataEntity $entity
 * @param stdClass $account
 * @param $entity_type
 *
 * @return boolean
 *   Whether access is allowed or not. If the entity type does not specify any
 *   access information, NULL is returned.
 */
function eitientity_score_data_access($op, $entity = NULL, $account = NULL, $entity_type) {

  $operations = array('administer', 'access overview', 'create', 'view', 'edit', 'delete', 'view unpublished');
  if (!in_array($op, $operations, TRUE)) {
    // If the $op was not one of the supported ones, we return access denied.
    return FALSE;
  }

  // Fix for panelizer.
  if ($op == 'update') {
    $op = 'edit';
  }

  if ($op == 'view') {
    $allow = FALSE;
    if (user_access("$entity_type entity administer")) {
      $allow = TRUE;
    }
    else if (user_access("$entity_type entity view unpublished")) {
      $allow = TRUE;
    }
    else if ($entity->status && user_access("$entity_type entity $op")) {
      $allow = TRUE;
    }

    return $allow;
  }

  if (user_access("$entity_type entity $op")) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Implements hook_permission().
 *
 * @return array
 */
function eitientity_score_data_permission() {
  $perms = array();

  $entity_type = 'score_data';
  $entity_info = entity_get_info($entity_type);

  $operations = array('administer', 'access overview', 'create', 'view', 'edit', 'delete', 'view unpublished');
  foreach ($operations as $op) {
    $permission_string = "$entity_type entity $op";
    $action = ucfirst($op);
    $t_args = array('%entity' => $entity_info['plural label']);
    $perms[$permission_string] = array(
      'title' => t("$action %entity", $t_args),
    );

    if ($op == 'administer') {
      $perms[$permission_string]['restrict access'] = TRUE;
    }
  }

  return $perms;
}

/**
 * Implements hook_menu_local_tasks_alter().
 *
 * @param $data
 * @param $router_item
 * @param $root_path
 */
function eitientity_score_data_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link to the entity add page on the entity overview page.
  if ($root_path == EITIENTITY_SCOREDATA_ADMIN_UI_PATH) {
    $item = menu_get_item(EITIENTITY_SCOREDATA_UI_PATH . '/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * Gets the page title for the passed operation.
 * @see entity_ui_get_page_title()
 *
 * @param string $op
 * @param string $entity_type
 * @param ScoreDataEntity $entity
 * @return string
 */
function eitientity_score_data_entity_ui_get_page_title($op, $entity_type, $entity = NULL) {
  module_load_include('inc', 'entity', 'includes/entity.ui');

  $label = entity_label($entity_type, $entity);

  // Get the entity information.
  $entity_info = entity_get_info($entity_type);
  $t_args = array(
    '@entity_type_label' => drupal_strtolower($entity_info['label']),
    '%label' => $label,
  );

  switch ($op) {
    case 'view':
      return $label;
    case 'edit':
      return t('Edit @entity_type_label %label', $t_args);
    case 'clone':
      return t('Clone @entity_type_label %label', $t_args);
    case 'revert':
      return t('Revert @entity_type_label %label', $t_args);
    case 'delete':
      return t('Delete @entity_type_label %label', $t_args);
    case 'export':
      return t('Export @entity_type_label %label', $t_args);
  }
  if (isset($entity)) {
    list(, , $bundle) = entity_extract_ids($entity_type, $entity);
  }
  else {
    $bundle = NULL;
  }
  return entity_ui_get_action_title($op, $entity_type, $bundle);
}


/**
 * Implements hook_date_popup_process_alter().
 *
 * @param $element
 * @param $form_state
 * @param $context
 */
function eitientity_score_data_date_popup_process_alter(&$element, &$form_state, $context) {
  if ($context['form']['#form_id'] != 'score_data_edit_standard_form') {
    return;
  }

  // Convert the date string to unix timestamp.
  if (!in_array('_score_data_form_date_popup_date_validate', $element['#element_validate'])) {
    array_push($element['#element_validate'], '_score_data_form_date_popup_date_validate');
  }
}

/**
 * Implements hook_admin_paths().
 */
function eitientity_score_data_admin_paths() {
  $paths = array(
    EITIENTITY_SCOREDATA_UI_PATH . '/add' => TRUE,
    EITIENTITY_SCOREDATA_UI_PATH . '/add/*' => TRUE,
    //EITIENTITY_SCOREDATA_UI_PATH . '/*' => TRUE,
    EITIENTITY_SCOREDATA_UI_PATH . '/*/edit' => TRUE,
    EITIENTITY_SCOREDATA_UI_PATH . '/*/usage' => TRUE,
    EITIENTITY_SCOREDATA_UI_PATH . '/*/delete' => TRUE,
  );

  return $paths;
}

/**
 * Helper function that returns existing score data by looking up
 * its specified country.
 *
 * @param integer $country_id
 *   ID of the country.
 *
 * @return bool|array
 *   Array of loaded entities if was any were found or FALSE.
 */
function eitientity_score_data_lookup_by_country($country_id) {
  if (!is_numeric($country_id)) {
    return FALSE;
  }

  $efq = new EntityFieldQuery();
  $efq_results = $efq->entityCondition('entity_type', 'score_data')
    ->propertyCondition('type', 'standard')
    ->propertyCondition('country_id', $country_id)
    ->execute();
  if (!empty($efq_results['score_data'])) {
    $score_data_entities = entity_load('score_data', array_keys($efq_results['score_data']));
    return $score_data_entities;
  }
  return FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter() for score_data_edit_standard_form.
 */
function eitientity_score_data_form_score_data_edit_standard_form_alter(&$form, &$form_state, $form_id) {
  // Limit format of PDF html text fields to min_html.
  if (isset($form['field_scd_pdf_text1']['und'][0])) {
    $form['field_scd_pdf_text1']['und']['#after_build'][] = 'eitientity_score_data_pdf_text_after_build';
    if (!$form['field_scd_pdf_text1']['und'][0]['#format']) {
      $form['field_scd_pdf_text1']['und'][0]['#format'] = 'min_html';
    }
  }
  if (isset($form['field_scd_pdf_text2']['und'][0])) {
    $form['field_scd_pdf_text2']['und']['#after_build'][] = 'eitientity_score_data_pdf_text_after_build';
    if (!$form['field_scd_pdf_text2']['und'][0]['#format']) {
      $form['field_scd_pdf_text2']['und'][0]['#format'] = 'min_html';
    }
  }
}

/**
 * After build function for score_data_edit_standard_form PDF html text fields.
 */
function eitientity_score_data_pdf_text_after_build(&$element, &$form_state) {
  $element[0]['format']['format']['#attributes']['disabled'] = 'disabled';
  return $element;
}
