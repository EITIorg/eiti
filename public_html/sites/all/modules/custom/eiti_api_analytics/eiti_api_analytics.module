<?php

require_once DRUPAL_ROOT . '/../vendor/autoload.php';
use TheIconic\Tracking\GoogleAnalytics\Analytics;

/**
 * Sends PageView tracking data to GA.
 *
 * @param string $page
 *   Page.
 * @param string $title
 *   Title.
 *
 * https://developers.google.com/analytics/devguides/collection/protocol/v1/devguide
 *
 * @return array
 *   Returns HTTP response from Google.
 */
function eiti_api_analytics_pageview_request($page, $title) {
  // Do not track in-site API queries.
  if (isset($_SERVER['HTTP_REFERER']) && $_SERVER['HTTP_REFERER']) {
    $referer_parts = parse_url($_SERVER['HTTP_REFERER']);
    if (isset($referer_parts['host']) && $referer_parts['host'] == $_SERVER['SERVER_NAME']) {
      return;
    }
  }

  $data = array();

  $data['v'] = 1;
  $data['tid'] = variable_get('googleanalytics_account', '');
  if (!$data['tid']) {
    return;
  }

  $data['cid'] = ip_address();
  if (!$data['cid']) {
    $data['cid'] = eiti_api_analytics_get_uuid();
  }

  $data['t'] = 'pageview';
  $data['dp'] = $page;
  $data['dt'] = $title;

  $analytics = new Analytics(TRUE);
  $analytics
    ->setProtocolVersion($data['v'])
    ->setTrackingId($data['tid'])
    ->setClientId($data['cid'])
    ->setDocumentPath($data['dp'])
    ->setDocumentTitle($data['dt']);
  $analytics->sendPageview();
}

/**
 * Get an UUID ver 4 identifier form cookie or generates one on fallback.
 *
 * @return string
 *   UUID ver 4 identifier.
 */
function eiti_api_analytics_get_uuid() {
  if (isset($_COOKIE['_ga'])) {
    list($version, $domain_depth, $cid1, $cid2) = explode('.', $_COOKIE["_ga"], 4);

    $contents = array(
      'version' => $version,
      'domainDepth' => $domain_depth,
      'cid' => $cid1 . '.' . $cid2
    );

    $cid = $contents['cid'];
  }
  else {
    $cid = _eiti_api_analytics_gen_uuid();
  }

  return $cid;
}

/**
 * Generates an UUID ver 4 identifier.
 *
 * http://www.php.net/manual/en/function.uniqid.php#94959
 *
 * @return string
 *   UUID.
 */
function _eiti_api_analytics_gen_uuid() {
  return sprintf('%04x%04x-%04x-%04x-%04x-%04x%04x%04x',
    // 32 bits for "time_low"
    mt_rand(0, 0xffff), mt_rand(0, 0xffff),
    // 16 bits for "time_mid"
    mt_rand(0, 0xffff),
    // 16 bits for "time_hi_and_version",
    // four most significant bits holds version number 4
    mt_rand(0, 0x0fff) | 0x4000,
    // 16 bits, 8 bits for "clk_seq_hi_res",
    // 8 bits for "clk_seq_low",
    // two most significant bits holds zero and one for variant DCE1.1
    mt_rand(0, 0x3fff) | 0x8000,
    // 48 bits for "node"
    mt_rand(0, 0xffff), mt_rand(0, 0xffff), mt_rand(0, 0xffff)
  );
}
