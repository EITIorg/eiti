<?php
/**
 * @file
 * Provides a ImplementingCountryEntity entity.
 */

/**
 * Define administrative URLs.
 */
define('EITIENTITY_IMPLEMENTING_COUNTRY_UI_PATH', 'implementing_country');
define('EITIENTITY_IMPLEMENTING_COUNTRY_ADMIN_UI_PATH', 'admin/content/implementing_country');
define('EITIENTITY_IMPLEMENTING_COUNTRY_BUNDLE_ADMIN_UI_PATH', 'admin/structure/implementing_country');

/**
 * Implements hook_entity_info().
 */
function eitientity_implementing_country_entity_info() {
  $entity_info = array();

  $menu_wildcard = '%implementing_country';
  $entity_info['implementing_country'] = array(
    'label' => t('Implementing Country'),
    'plural label' => t('Implementing Countries'),
    'description' => t('Custom implementing country entity.'),

    'base table' => 'eiti_implementing_country',
    'module' => 'eitientity_implementing_country',

    'entity class' => 'ImplementingCountryEntity',
    'controller class' => 'EntityAPIController',
    //'extra fields controller class' => 'EntityDefaultExtraFieldsController',
    'metadata controller class' => 'ImplementingCountryMetadataController',

    //'entity cache' => TRUE,
    'field cache' => TRUE,
    'static cache' => TRUE,

    'fieldable' => TRUE,

    'access callback' => 'eitientity_implementing_country_access',
    'uri callback' => 'entity_class_uri',

    'entity keys' => array(
      'id' => 'id',
      //'revision' => 'vid',
      'bundle' => 'type',
      'label' => 'name',
      'language' => 'language',
    ),

    'field replacement' => array(
      'name' => array(
        'field' => array(
          'type' => 'text',
          'cardinality' => 1,
          'translatable' => TRUE,
        ),
        'instance' => array(
          'label' => t('Name'),
          'description' => '',
          'required' => TRUE,
          'settings' => array(
            'text_processing' => 0,
          ),
          'widget' => array(
            'weight' => -5,
          ),
          'display' => array(
            'default' => array(
              'type' => 'hidden',
            ),
          ),
        ),
      ),
    ),

    'bundles' => array(),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'bundles callback' => 'eitientity_implementing_country_get_types',

    'admin ui' => array(
      'path' => EITIENTITY_IMPLEMENTING_COUNTRY_ADMIN_UI_PATH,
      'entity path' => EITIENTITY_IMPLEMENTING_COUNTRY_UI_PATH,
      'bundle path' => EITIENTITY_IMPLEMENTING_COUNTRY_BUNDLE_ADMIN_UI_PATH,
      'controller class' => 'ImplementingCountryEntityUIController',
      'menu wildcard' => $menu_wildcard,
      'file' => 'eitientity_implementing_country.admin.inc',
    ),

    'view modes' => array(
      'full' => array(
        'label' => t('Full'),
        'custom settings' => FALSE,
      ),
      'teaser' => array(
        'label' => t('Teaser'),
        'custom settings' => FALSE,
      ),
    ),
  );

  foreach ($entity_info['implementing_country']['bundles callback']() as $type => $bundle_info) {
    $entity_info['implementing_country']['bundles'][$type] = array(
      'label' => $bundle_info['label'],
      'admin' => array(
        'path' => EITIENTITY_IMPLEMENTING_COUNTRY_BUNDLE_ADMIN_UI_PATH . '/manage/' . $type,
      ),
    );
  }

  return $entity_info;
}

/**
 * Implements hook_admin_paths().
 */
function eitientity_implementing_country_admin_paths() {
  $paths = array(
    EITIENTITY_IMPLEMENTING_COUNTRY_UI_PATH . '/add' => TRUE,
    EITIENTITY_IMPLEMENTING_COUNTRY_UI_PATH . '/add/*' => TRUE,
    //EITIENTITY_IMPLEMENTING_COUNTRY_UI_PATH . '/*' => TRUE,
    EITIENTITY_IMPLEMENTING_COUNTRY_UI_PATH . '/*/edit' => TRUE,
    EITIENTITY_IMPLEMENTING_COUNTRY_UI_PATH . '/*/usage' => TRUE,
    EITIENTITY_IMPLEMENTING_COUNTRY_UI_PATH . '/*/delete' => TRUE,
  );

  return $paths;
}

/**
 * Menu loader function: load a country from its path.
 *
 * @see entity_object_load()
 *
 * @param $entity_id
 * @param $entity_type
 * @return FALSE|ImplementingCountryEntity
 */
function implementing_country_load($entity_id, $entity_type) {
  return entity_object_load($entity_id, $entity_type);
}

/**
 * Returns a list of country types.
 */
function eitientity_implementing_country_get_types() {
  $items = array();

  $items['normal'] = array(
    'label' => t('Normal'),
    'description' => t('Create a normal implementing country.'),
  );

  return $items;
}

/**
 * Returns the entity type name.
 *
 * @param $bundle
 * @return string|FALSE
 */
function eitientity_implementing_country_type_get_name($bundle) {
  $bundles = eitientity_implementing_country_get_types();
  return (isset($bundles[$bundle]['label'])) ? $bundles[$bundle]['label'] : FALSE;
}

/**
 * Access callback for custom country entities.
 *
 * @param $op
 * @param ImplementingCountryEntity $entity
 * @param stdClass $account
 * @param $entity_type
 *
 * @return boolean
 *   Whether access is allowed or not. If the entity type does not specify any
 *   access information, NULL is returned.
 */
function eitientity_implementing_country_access($op, $entity = NULL, $account = NULL, $entity_type) {
  $rights = &drupal_static(__FUNCTION__, array());

  // Fix for panelizer.
  if ($op == 'update') {
    $op = 'edit';
  }

  $operations = array('administer', 'access overview', 'create', 'view', 'edit', 'delete');
  if (!in_array($op, $operations, TRUE)) {
    // If the $op was not one of the supported ones, we return access denied.
    return FALSE;
  }

  // If no user object is supplied, the access check is for the current user.
  if (empty($account)) {
    $account = $GLOBALS['user'];
  }

  $cid = is_object($entity) ? "$entity_type:" . $entity->identifier() : FALSE;

  // If we've already checked access for this node, user and op, return from cache.
  if ($cid && isset($rights[$account->uid][$cid][$op])) {
    return $rights[$account->uid][$cid][$op];
  }

  if ($op == 'view') {
    if (empty($cid)) {
      return FALSE;
    }

    $allow = FALSE;
    if (user_access("$entity_type entity administer") || user_access("$entity_type entity access overview")) {
      $allow = TRUE;
    }
    else if ($entity->status && user_access("$entity_type entity $op")) {
      // For now we ignore the status field.
      $allow = TRUE;
    }

    $rights[$account->uid][$cid][$op] = $allow;
    return $allow;
  }

  if (user_access("$entity_type entity $op")) {
    if ($cid) {
      $rights[$account->uid][$cid][$op] = TRUE;
    }
    return TRUE;
  }

  if ($cid) {
    $rights[$account->uid][$cid][$op] = FALSE;
  }
  return FALSE;
}

/**
 * Implements hook_permission().
 */
function eitientity_implementing_country_permission() {
  $perms = array();

  $entity_type = 'implementing_country';
  $entity_info = entity_get_info($entity_type);

  $operations = array('administer', 'access overview', 'create', 'view', 'edit', 'delete');
  foreach ($operations as $op) {
    $permission_string = "$entity_type entity $op";
    $action = ucfirst($op);
    $t_args = array('%entity' => $entity_info['plural label']);
    $perms[$permission_string] = array(
      'title' => t("$action %entity", $t_args),
    );

    if ($op == 'administer') {
      $perms[$permission_string]['restrict access'] = TRUE;
    }

    if ($op == 'access overview') {
      $perms[$permission_string]['title'] = t('Access the %entity overview page', $t_args);
      $perms[$permission_string]['description'] = t('Get an overview of all %entity.', $t_args);
    }
  }

  return $perms;
}

/**
 * Implements hook_menu_local_tasks_alter().
 *
 * @param $data
 * @param $router_item
 * @param $root_path
 */
function eitientity_implementing_country_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link to 'implementing_country/add' on 'admin/content/implementing_country' page.
  if ($root_path == EITIENTITY_IMPLEMENTING_COUNTRY_ADMIN_UI_PATH) {
    $item = menu_get_item(EITIENTITY_IMPLEMENTING_COUNTRY_UI_PATH . '/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * Gets the page title for the passed operation.
 * @see entity_ui_get_page_title()
 *
 * @param $op
 * @param $entity_type
 * @param ImplementingCountryEntity $entity
 * @return null|string
 */
function eitientity_implementing_country_entity_ui_get_page_title($op, $entity_type, $entity = NULL) {
  module_load_include('inc', 'entity', 'includes/entity.ui');

  $label = entity_label($entity_type, $entity);

  // Get the entity information.
  $entity_info = entity_get_info($entity_type);
  $t_args = array(
    '@entity_type' => drupal_strtolower($entity_info['label']),
    '%label' => $label,
  );

  switch ($op) {
    case 'view':
      return $label;
    case 'edit':
      return t('Edit @entity_type %label', $t_args);
    case 'clone':
      return t('Clone @entity_type %label', $t_args);
    case 'revert':
      return t('Revert @entity_type %label', $t_args);
    case 'delete':
      return t('Delete @entity_type %label', $t_args);
    case 'export':
      return t('Export @entity_type %label', $t_args);
  }
  if (isset($entity)) {
    list(, , $bundle) = entity_extract_ids($entity_type, $entity);
  }
  else {
    $bundle = NULL;
  }
  return entity_ui_get_action_title($op, $entity_type, $bundle);
}

/**
 * Implements hook_field_extra_fields().
 */
function eitientity_implementing_country_field_extra_fields() {
  $extra = array();

  foreach (eitientity_implementing_country_get_types() as $bundle_type => $bundle_info) {
    $extra['implementing_country'][$bundle_type]['form'] = array(
      'name' => array(
        'label' => t('Name'),
        'description' => t('Name of the @label', array('@label' => t('Implementing Country'))),
        'weight' => -5,
      ),
    );
  }

  return $extra;
}

/**
 * Implements hook_ctools_plugin_directory().
 *
 * @param string $owner
 * @param string $plugin_type
 * @return null|string
 */
function eitientity_implementing_country_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'panelizer' && $plugin_type == 'entity') {
    return 'plugins/entity';
  }

  return NULL;
}

/**
 * Helper function that returns existing implementing country by looking up
 * its name.
 *
 * @param string $name
 *   Name of the country.
 *
 * @return bool|stdClass
 *   Loaded entity if was found or FALSE.
 */
function eitientity_implementing_country_lookup_by_name($name) {
  $efq = new EntityFieldQuery();
  $efq_results = $efq->entityCondition('entity_type', 'implementing_country')
    ->propertyCondition('type', 'normal')
    ->propertyCondition('name', $name, 'LIKE')
    ->execute();

  if (!empty($efq_results['implementing_country'])) {
    $ids = array_keys($efq_results['implementing_country']);
    $entities = entity_load('implementing_country', $ids);
    return $entities;
  }
  return FALSE;
}

/**
 * Implements hook_pathauto().
 */
function eitientity_implementing_country_pathauto($op) {
  if ($op == 'settings') {
    $settings = array();
    $settings['module'] = 'implementing_country';
    $settings['token_type'] = 'implementing_country';
    $settings['groupheader'] = t('Implementing Country paths');
    $settings['patterndescr'] = t('Default path pattern (applies to all entities with blank patterns below)');
    $settings['patterndefault'] = '[implementing_country:name]';
    $settings['batch_update_callback'] = 'eitientity_implementing_country_pathauto_bulk_update_batch_process';
    $settings['batch_file'] = drupal_get_path('module', 'eitientity_implementing_country') . '/eitientity_implementing_country.pathauto.inc';

    $languages = array();
    if (module_exists('locale')) {
      $languages = array(LANGUAGE_NONE => t('language neutral')) + locale_language_list('name');
    }

    foreach (eitientity_implementing_country_get_types() as $bundle => $bundle_details) {
      if (count($languages)) {
        $settings['patternitems'][$bundle] = t('Default path pattern for Implementing Country (@bundle_label - applies to all @bundle_label countries with blank patterns below)', array('@bundle_label' => $bundle_details['label']));
        foreach ($languages as $lang_code => $lang_name) {
          $settings['patternitems'][$bundle . '_' . $lang_code] = t('Pattern for all @language - Implementing Countries (@bundle_label) paths', array('@bundle_label' => $bundle_details['label'], '@language' => $lang_name));
        }
      }
    }
    return (object) $settings;
  }
}

/**
 * Implements hook_insert().
 */
function eitientity_implementing_country_entity_insert($entity, $type) {
  if ($type == 'implementing_country') {
    eitientity_implementing_country_pathauto_update($entity, 'insert');
  }
}

/**
 * Implements hook_entity_update().
 */
function eitientity_implementing_country_entity_update($entity, $type) {
  if ($type == 'implementing_country') {
    eitientity_implementing_country_pathauto_update($entity, 'update');
  }
}

/**
 * Implements hook_entity_delete().
 */
function eitientity_implementing_country_entity_delete($entity, $type) {
  if ($type == 'implementing_country') {
    pathauto_entity_path_delete_all('implementing_country', $entity, "implementing_country/{$entity->nid}");
  }
}

/**
 * Helper function that actually creates / updates the path-auto url.
 */
function eitientity_implementing_country_pathauto_update($entity, $op, array $options = array()) {
  $options += array('language' => pathauto_entity_language('implementing_country', $entity));

  // Skip processing if the node has no pattern.
  if (!pathauto_pattern_load_by_entity('implementing_country', $entity->type, $options['language'])) {
    return FALSE;
  }

  module_load_include('inc', 'pathauto');
  $uri = entity_uri('implementing_country', $entity);
  return pathauto_create_alias('implementing_country', $op, $uri['path'], array('implementing_country' => $entity), $entity->type, $options['language']);
}

/**
 * Function used to update / create URL alias for multiple implementing countries.
 */
function eitientity_implementing_country_update_alias_multiple(array $ids, $op, array $options = array()) {
  $options += array('message' => FALSE);

  $implementing_countries = entity_load('implementing_country', $ids);
  foreach ($implementing_countries as $implementing_country) {
    eitientity_implementing_country_pathauto_update($implementing_country, $op, $options);
  }

  if (!empty($options['message'])) {
    drupal_set_message(format_plural(count($ids), 'Updated URL alias for 1 implementing country.', 'Updated URL aliases for @count implementing countries.'));
  }
}



/**
 * Implements hook_tokens_info().
 */
function eitientity_implementing_country_token_info() {
  $token_def = array();

  // Generic adopted title (User Picture, Source, etc.).
  $token_def['tokens']['implementing_country']['name-field-english'] = array(
    'name' => t('English Name'),
    'description' => t('Contains the english version of the title.'),
  );

  return $token_def;
}

/**
 * Implements hook_tokens().
 */
function eitientity_implementing_country_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  $opted_types = array('implementing_country');
  $opted_tokens = array('name-field-english');

  // Only handling summary_data tokens.
  if (!in_array($type, $opted_types)) {
    return;
  }

  foreach ($tokens as $name => $original) {
    if (!in_array($name, $opted_tokens)) {
      continue;
    }

    switch ($name) {
      case 'name-field-english':
        $implementing_country = $data['implementing_country'];
        $implementing_country_emw = entity_metadata_wrapper('implementing_country', $implementing_country);
        $title_english = $implementing_country_emw->language('en')->name_field->value();
        $title_english = (empty($title_english)) ? $implementing_country_emw->name_field->value() : $title_english;
        $replacements[$original] = $title_english;
        break;
    }
  }

  return $replacements;
}

/**
 * Returns country ISO2 code given it's ID.
 */
function eitientity_implementing_country_get_iso2($id) {
  $country_id_iso = &drupal_static(__FUNCTION__);
  if (!isset($country_id_iso)) {
    $query = db_select('eiti_implementing_country', 'c');
    $query->fields('c', array('id', 'iso'));
    $country_id_iso = $query->execute()->fetchAllKeyed();
  }

  if (isset($country_id_iso[$id])) {
    return $country_id_iso[$id];
  }
  return NULL;
}

/**
 * Returns country ID given it's ISO2 code.
 */
function eitientity_implementing_country_get_id($iso) {
  $country_iso_id = &drupal_static(__FUNCTION__);
  if (!isset($country_iso_id)) {
    $query = db_select('eiti_implementing_country', 'c');
    $query->fields('c', array('iso', 'id'));
    $country_iso_id = $query->execute()->fetchAllKeyed();
  }

  if (isset($country_iso_id[$iso])) {
    return $country_iso_id[$iso];
  }
  return NULL;
}
