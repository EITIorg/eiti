<?php
/**
 * @file
 * Exposes a custom entity to store summary data.
 */

/**
 * Define administrative URLs.
 */
define('EITIENTITY_SUMMARYDATA_UI_PATH', 'summary_data');
define('EITIENTITY_SUMMARYDATA_ADMIN_UI_PATH', 'admin/content/summary_data');
define('EITIENTITY_SUMMARYDATA_BUNDLE_ADMIN_UI_PATH', 'admin/structure/summary_data');

/**
 * Date format for summary_data entities.
 */
define('EITIENTITY_SUMMARYDATA_DATE_FORMAT', 'Y-m-d');

/**
 * Implements hook_entity_info().
 *
 * @return array
 */
function eitientity_summary_data_entity_info() {
  $entity_info = array();

  $menu_wildcard = '%summary_data';
  $entity_info['summary_data'] = array(
    'label' => t('Summary Data'),
    'plural label' => t('Summary Data'),
    'description' => t('Summary Data represent a single report.'),

    'base table' => 'eiti_summary_data',
    'module' => 'eitientity_summary_data',

    'entity class' => 'SummaryDataEntity',
    'controller class' => 'EntityAPIController',
    'extra fields controller class' => 'SummaryDataExtraFieldsController',
    'metadata controller class' => 'SummaryDataMetadataController',
    //'i18n controller class' => 'EntityDefaultI18nStringController',

    //'entity cache' => FALSE,
    //'field cache' => FALSE,
    'static cache' => FALSE,
    'fieldable' => TRUE,

    'access callback' => 'eitientity_summary_data_access',
    'uri callback' => 'entity_class_uri',
    'label callback' => 'eitientity_summary_data_label',

    'entity keys' => array(
      'id' => 'id',
      //'revision' => 'vid',
      'bundle' => 'type',
      //'label' => 'name',
      //'language' => 'language',
    ),

    'bundles' => array(),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'bundles callback' => 'eitientity_summary_data_get_types',

    'admin ui' => array(
      'path' => EITIENTITY_SUMMARYDATA_ADMIN_UI_PATH,
      'entity path' => EITIENTITY_SUMMARYDATA_UI_PATH,
      'bundle path' => EITIENTITY_SUMMARYDATA_BUNDLE_ADMIN_UI_PATH,
      'controller class' => 'SummaryDataEntityUIController',
      'menu wildcard' => $menu_wildcard,
      'file' => 'eitientity_summary_data.admin.inc',
    ),

    //'view modes' => array(
    //  'full' => array(
    //    'label' => t('Full'),
    //    'custom settings' => FALSE,
    //  ),
    //),
  );

  foreach ($entity_info['summary_data']['bundles callback']() as $type => $bundle_info) {
    $entity_info['summary_data']['bundles'][$type] = array(
      'label' => $bundle_info['label'],
      'admin' => array(
        'path' => EITIENTITY_SUMMARYDATA_BUNDLE_ADMIN_UI_PATH . '/manage/' . $type,
      ),
    );
  }

  return $entity_info;
}

/**
 * Menu loader function: load summary data from its path.
 *
 * @see entity_object_load()
 *
 * @param $entity_id
 * @param $entity_type
 * @return FALSE|SummaryDataEntity
 */
function summary_data_load($entity_id, $entity_type) {
  return entity_object_load($entity_id, $entity_type);
}

/**
 * Returns the label callback.
 *
 * @param SummaryDataEntity $entity
 * @param $entity_type
 *
 * @return string
 */
function eitientity_summary_data_label($entity, $entity_type) {
  $t_args = array();

  if (!is_null($entity->country_id)) {
    $country_entity = entity_load_single('implementing_country', $entity->country_id);
    if ($country_entity) {
      $t_args['!country'] = entity_label('implementing_country', $country_entity);
    }
  }

  if (empty($t_args['!country'])) {
    return '';
  }

  $t_args['!year_start'] = '';
  if (!is_null($entity->year_start)) {
    $t_args['!year_start'] = format_date($entity->year_start, 'custom', 'Y');
  }

  $t_args['!year_end'] = '';
  if (!is_null($entity->year_end)) {
    $t_args['!year_end'] = format_date($entity->year_end, 'custom', 'Y');
  }

  if ($t_args['!year_start'] == $t_args['!year_end']) {
    return t('!country: !year_start', $t_args);
  }

  return t('!country: !year_end', $t_args);
}

/**
 * Returns a list of summary_data types.
 *
 * @return array
 */
function eitientity_summary_data_get_types() {
  $items = array();

  $items['summary_data'] = array(
    'label' => t('Summary Data'),
    'description' => t('Summary Data represent a single report.'),
  );

  return $items;
}

/**
 * Returns the entity type name.
 *
 * @param $bundle
 * @return false|string
 */
function eitientity_summary_data_type_get_name($bundle) {
  $bundles = eitientity_summary_data_get_types();
  return (isset($bundles[$bundle]['label'])) ? $bundles[$bundle]['label'] : FALSE;
}

/**
 * Access callback for custom summary_data entities.
 *
 * @param $op
 * @param SummaryDataEntity $entity
 * @param stdClass $account
 * @param $entity_type
 *
 * @return boolean
 *   Whether access is allowed or not. If the entity type does not specify any
 *   access information, NULL is returned.
 */
function eitientity_summary_data_access($op, $entity = NULL, $account = NULL, $entity_type) {

  $operations = array('administer', 'access overview', 'create', 'view', 'edit', 'delete');
  if (!in_array($op, $operations, TRUE)) {
    // If the $op was not one of the supported ones, we return access denied.
    return FALSE;
  }

  // Fix for panelizer.
  if ($op == 'update') {
    $op = 'edit';
  }

  if ($op == 'view') {
    $allow = FALSE;
    if (user_access("$entity_type entity administer")) {
      $allow = TRUE;
    }
    else if ($entity->status && user_access("$entity_type entity $op")) {
      $allow = TRUE;
    }

    return $allow;
  }

  if (user_access("$entity_type entity $op")) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Implements hook_permission().
 *
 * @return array
 */
function eitientity_summary_data_permission() {
  $perms = array();

  $entity_type = 'summary_data';
  $entity_info = entity_get_info($entity_type);

  $operations = array('administer', 'access overview', 'create', 'view', 'edit', 'delete');
  foreach ($operations as $op) {
    $permission_string = "$entity_type entity $op";
    $action = ucfirst($op);
    $t_args = array('%entity' => $entity_info['plural label']);
    $perms[$permission_string] = array(
      'title' => t("$action %entity", $t_args),
    );

    if ($op == 'administer') {
      $perms[$permission_string]['restrict access'] = TRUE;
    }
  }

  return $perms;
}

/**
 * Implements hook_menu_local_tasks_alter().
 *
 * @param $data
 * @param $router_item
 * @param $root_path
 */
function eitientity_summary_data_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link to the entity add page on the entity overview page.
  if ($root_path == EITIENTITY_SUMMARYDATA_ADMIN_UI_PATH) {
    $item = menu_get_item(EITIENTITY_SUMMARYDATA_UI_PATH . '/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * Gets the page title for the passed operation.
 * @see entity_ui_get_page_title()
 *
 * @param string $op
 * @param string $entity_type
 * @param SummaryDataEntity $entity
 * @return string
 */
function eitientity_summary_data_entity_ui_get_page_title($op, $entity_type, $entity = NULL) {
  module_load_include('inc', 'entity', 'includes/entity.ui');

  $label = entity_label($entity_type, $entity);

  // Get the entity information.
  $entity_info = entity_get_info($entity_type);
  $t_args = array(
    '@entity_type_label' => drupal_strtolower($entity_info['label']),
    '%label' => $label,
  );

  switch ($op) {
    case 'view':
      return $label;
    case 'edit':
      return t('Edit @entity_type_label %label', $t_args);
    case 'clone':
      return t('Clone @entity_type_label %label', $t_args);
    case 'revert':
      return t('Revert @entity_type_label %label', $t_args);
    case 'delete':
      return t('Delete @entity_type_label %label', $t_args);
    case 'export':
      return t('Export @entity_type_label %label', $t_args);
  }
  if (isset($entity)) {
    list(, , $bundle) = entity_extract_ids($entity_type, $entity);
  }
  else {
    $bundle = NULL;
  }
  return entity_ui_get_action_title($op, $entity_type, $bundle);
}


/**
 * Implements hook_date_popup_process_alter().
 *
 * @param $element
 * @param $form_state
 * @param $context
 */
function eitientity_summary_data_date_popup_process_alter(&$element, &$form_state, $context) {
  if ($context['form']['#form_id'] != 'summary_data_form') {
    return;
  }

  // Convert the date string to unix timestamp.
  if (!in_array('_summary_data_form_date_popup_date_validate', $element['#element_validate'])) {
    array_push($element['#element_validate'], '_summary_data_form_date_popup_date_validate');
  }
}

/**
 * Implements hook_admin_paths().
 */
function eitientity_summary_data_admin_paths() {
  $paths = array(
    EITIENTITY_SUMMARYDATA_UI_PATH . '/add' => TRUE,
    EITIENTITY_SUMMARYDATA_UI_PATH . '/add/*' => TRUE,
    //EITIENTITY_SUMMARYDATA_UI_PATH . '/*' => TRUE,
    EITIENTITY_SUMMARYDATA_UI_PATH . '/*/edit' => TRUE,
    EITIENTITY_SUMMARYDATA_UI_PATH . '/*/usage' => TRUE,
    EITIENTITY_SUMMARYDATA_UI_PATH . '/*/upload' => TRUE,
    EITIENTITY_SUMMARYDATA_UI_PATH . '/*/delete' => TRUE,
  );

  return $paths;
}

/**
 * Value callback for "Sectors Covered".
 *
 * @param $data
 * @param array $options
 * @param $name
 * @param $type
 * @param $info
 *
 * @return null|string
 */
function eitientity_summary_data_entity_property_get_sectors_covered($data, array $options, $name, $type, $info) {
  $fields = array(
    'field_sd_oil_sector',
    'field_sd_gas_sector',
    'field_sd_mining_sector',
    'field_sd_other_sector',
  );

  $emw = entity_metadata_wrapper($type, $data);

  $sectors_covered = array();
  foreach ($fields as $field_name) {
    if (empty($data->{$field_name})) {
      continue;
    }

    // Special case for the Other sectors field which is actually a text field.
    if ($field_name == 'field_sd_other_sector' && $emw->{$field_name}->value()) {
      // Some just provide the string "Yes" fro the other sectors covered.
      if ($emw->{$field_name}->value() == 'Yes' || $emw->{$field_name}->value() == 'yes') {
        $info = $emw->{$field_name}->info();
        $sectors_covered[] = check_plain($info['label']);
      }
      else {
        $sectors_covered[] = check_plain($emw->{$field_name}->value());
      }
    }
    else if ($emw->{$field_name}->value()) {
      $info = $emw->{$field_name}->info();
      $sectors_covered[] = check_plain($info['label']);
    }
  }

  if (!empty($sectors_covered)) {
    return implode(', ', $sectors_covered);
  }

  return t('None');
}

/**
 * Value callback for "Government revenue - extractive industries".
 *
 * @param $data
 * @param array $options
 * @param $name
 * @param $type
 * @param $info
 */
function eitientity_summary_data_entity_property_get_indicator_gov_revenue_extractive($data, array $options, $name, $type, $info) {
  // Load Parent Indicator:
  // Contribution of extractive industries to economy (3.4) > Government revenue - extractive industries
  // @HACK: Have dynamic indicators and hardcoded reports.
  $hardcoded_indicator_id = 4;

  // SELECT fiv.field_sd_indicator_values_target_id AS iv_id, iv.* FROM field_data_field_sd_indicator_values fiv RIGHT JOIN eiti_indicator_value iv ON iv.id = fiv.field_sd_indicator_values_target_id AND iv.indicator_id = 4 WHERE fiv.entity_id = 50;
  $select = db_select('field_data_field_sd_indicator_values', 'fiv');
  $select->innerJoin('eiti_indicator_value', 'iv', 'iv.id = fiv.field_sd_indicator_values_target_id');
  $select->condition('fiv.entity_type', 'summary_data')
    ->condition('fiv.entity_id', $data->id)
    ->condition('iv.indicator_id', $hardcoded_indicator_id)
    ->fields('iv');
  $queried_indicators = $select->execute()
    ->fetchAllAssoc('id');

  if (empty($queried_indicators)) {
    return t('N/A');
  }
  $queried_indicator = reset($queried_indicators);

  // @TODO: Configure indicator_value entity display settings.
  $value = t('@currency @value', array(
    '@currency' => $queried_indicator->value_unit,
    '@value' => number_format($queried_indicator->value_numeric, 2),
  ));

  return $value;
}

/**
 * Value callback for "'Government revenue - calculated sum".
 *
 * @param $data
 * @param array $options
 * @param $name
 * @param $type
 * @param $info
 */
function eitientity_summary_data_entity_property_calculate_gov_revenue($data, array $options, $name, $type, $info) {
  // Following the example above for consistency.
  $select = db_select('field_data_field_sd_revenue_government', 'fgr');
  $select->innerJoin('eiti_revenue_stream', 'rs', 'rs.id = fgr.field_sd_revenue_government_target_id');
  $select->condition('fgr.entity_type', 'summary_data')
    ->condition('fgr.entity_id', $data->id)
    ->condition('rs.type', 'agency');

  // We choose to do it in the Database for performance reasons.
  // Also we *consider* that the currency is always USD as the import does all the necessary conversion.
  $select->addExpression('SUM(rs.revenue)', 'revenue');
  $revenue = $select->execute()->fetchField();

  if (empty($revenue)) {
    return t('N/A');
  }

  $value = t('@currency @value', array(
    '@currency' => t('USD'),
    '@value' => number_format($revenue, 2),
  ));

  return $value;
}


/**
 * Implements hook_pathauto().
 */
function eitientity_summary_data_pathauto($op) {
  if ($op == 'settings') {
    $settings = array();
    $settings['module'] = 'summary_data';
    $settings['token_type'] = 'summary_data';
    $settings['groupheader'] = t('Summary Data paths');
    $settings['patterndescr'] = t('Default path pattern (applies to all entities with blank patterns below)');
    $settings['patterndefault'] = '[summary_data:name]';
    $settings['batch_update_callback'] = 'eitientity_summary_data_pathauto_bulk_update_batch_process';
    $settings['batch_file'] = drupal_get_path('module', 'eitientity_summary_data') . '/eitientity_summary_data.pathauto.inc';

    $languages = array();
    if (module_exists('locale')) {
      $languages = array(LANGUAGE_NONE => t('language neutral')) + locale_language_list('name');
    }

    foreach (eitientity_summary_data_get_types() as $bundle => $bundle_details) {
      if (count($languages)) {
        $settings['patternitems'][$bundle] = t('Default path pattern for Implementing Country (@bundle_label - applies to all @bundle_label countries with blank patterns below)', array('@bundle_label' => $bundle_details['label']));
        foreach ($languages as $lang_code => $lang_name) {
          $settings['patternitems'][$bundle . '_' . $lang_code] = t('Pattern for all @language - Implementing Countries (@bundle_label) paths', array('@bundle_label' => $bundle_details['label'], '@language' => $lang_name));
        }
      }
    }
    return (object) $settings;
  }
}

/**
 * Implements hook_insert().
 */
function eitientity_summary_data_entity_insert($entity, $type) {
  if ($type == 'summary_data') {
    eitientity_summary_data_pathauto_update($entity, 'insert');
  }
}

/**
 * Implements hook_entity_update().
 */
function eitientity_summary_data_entity_update($entity, $type) {
  if ($type == 'summary_data') {
    eitientity_summary_data_pathauto_update($entity, 'update');
  }
}

/**
 * Implements hook_entity_delete().
 */
function eitientity_summary_data_entity_delete($entity, $type) {
  if ($type == 'summary_data') {
    pathauto_entity_path_delete_all('summary_data', $entity, "summary_data/{$entity->id}");
  }
}

/**
 * Helper function that actually creates / updates the path-auto url.
 */
function eitientity_summary_data_pathauto_update($entity, $op, array $options = array()) {
  $options += array('language' => pathauto_entity_language('summary_data', $entity));

  // Make sure our class is here.
  if (!$entity instanceof SummaryDataEntity) {
    $entity = new SummaryDataEntity((array) $entity, 'summary_data');
  }

  // Skip processing if the node has no pattern.
  if (!pathauto_pattern_load_by_entity('summary_data', $entity->type, $options['language'])) {
    return FALSE;
  }

  module_load_include('inc', 'pathauto');

  $uri = entity_uri('summary_data', $entity);
  return pathauto_create_alias('summary_data', $op, $uri['path'], array('summary_data' => $entity), $entity->type, $options['language']);
}

/**
 * Function used to update / create URL alias for multiple summary data.
 */
function eitientity_summary_data_update_alias_multiple(array $ids, $op, array $options = array()) {
  $options += array('message' => FALSE);

  $summary_data_entities = entity_load('summary_data', $ids);
  foreach ($summary_data_entities as $summary_data) {
    eitientity_summary_data_pathauto_update($summary_data, $op, $options);
  }

  if (!empty($options['message'])) {
    drupal_set_message(format_plural(count($ids), 'Updated URL alias for 1 summary data.', 'Updated URL aliases for @count summar data.'));
  }
}

/**
 * Implements hook_tokens_info().
 */
function eitientity_summary_data_token_info() {
  $token_def = array();

  // Generic adopted title (User Picture, Source, etc.).
  $token_def['tokens']['summary_data']['title'] = array(
    'name' => t('Generated Title'),
    'description' => t('Contains the generated title for the summary data (see entity label).'),
  );

  return $token_def;
}

/**
 * Implements hook_tokens().
 */
function eitientity_summary_data_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  $opted_types = array('summary_data');
  $opted_tokens = array('title');

  // Only handling summary_data tokens.
  if (!in_array($type, $opted_types)) {
    return;
  }

  foreach ($tokens as $name => $original) {
    if (!in_array($name, $opted_tokens)) {
      continue;
    }

    switch ($name) {
      case 'title':
        $summary_data = $data['summary_data'];
        $replacements[$original] = eitientity_summary_data_label($summary_data, 'summary_data');
        break;
    }
  }

  return $replacements;
}

/**
 * Implements hook_entity_presave().
 */
function eitientity_summary_data_entity_presave($entity, $type) {
  if ($type == 'summary_data') {
    if ($entity->country_id && $entity->year_start) {
      // Update id2 value.
      $iso = eitientity_implementing_country_get_iso2($entity->country_id);
      $year = date('Y', $entity->year_start);
      if ($iso && $year) {
        $entity->id2 = $iso . $year;
      }
    }
  }
}

/**
 * Returns summary data ID2 given it's ID.
 */
function eitientity_summary_data_get_id2($id) {
  $sd_id_id2 = &drupal_static(__FUNCTION__);
  if (!isset($sd_id_id2)) {
    $query = db_select('eiti_summary_data', 'sd');
    $query->fields('sd', array('id', 'id2'));
    $sd_id_id2 = $query->execute()->fetchAllKeyed();
  }

  if (isset($sd_id_id2[$id])) {
    return $sd_id_id2[$id];
  }
  return NULL;
}

/**
 * Returns summary data ID given it's ID2.
 */
function eitientity_summary_data_get_id($id2) {
  $sd_id2_id = &drupal_static(__FUNCTION__);
  if (!isset($sd_id2_id)) {
    $query = db_select('eiti_summary_data', 'sd');
    $query->fields('sd', array('id2', 'id'));
    $sd_id2_id = $query->execute()->fetchAllKeyed();
  }

  if (isset($sd_id2_id[$id2])) {
    return $sd_id2_id[$id2];
  }
  return NULL;
}
