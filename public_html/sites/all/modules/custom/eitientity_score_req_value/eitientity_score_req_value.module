<?php
/**
 * @file
 * Exposes a custom entity to store score_reqs.
 */

/**
 * Define the values.
 */
// Values (Progress Values).
define('EITIENTITY_SCORE_REQ_VALUE_NO', 0);
define('EITIENTITY_SCORE_REQ_VALUE_INADEQUATE', 1);
define('EITIENTITY_SCORE_REQ_VALUE_MEANINGFUL', 2);
define('EITIENTITY_SCORE_REQ_VALUE_SATISFACTORY', 3);
define('EITIENTITY_SCORE_REQ_VALUE_BEYOND', 4);
define('EITIENTITY_SCORE_REQ_VALUE_NA', 5);

// Direction of Progress.
define('EITIENTITY_SCORE_REQ_DIR_OF_PROGRESS_SAME', 0);
define('EITIENTITY_SCORE_REQ_DIR_OF_PROGRESS_BETTER', 1);
define('EITIENTITY_SCORE_REQ_DIR_OF_PROGRESS_WORSE', 2);
define('EITIENTITY_SCORE_REQ_DIR_OF_PROGRESS_EMPTY', 3);

// Is applicable.
define('EITIENTITY_SCORE_REQ_IS_APPLICABLE', 0);
define('EITIENTITY_SCORE_REQ_IS_NOT_APPLICABLE', 1);

// Is required.
define('EITIENTITY_SCORE_REQ_REQUIRED', 1);
define('EITIENTITY_SCORE_REQ_ENCOURAGED', 0);

/**
 * Implements hook_entity_info().
 */
function eitientity_score_req_value_entity_info() {
  $entity_info = array();

  $entity_info['score_req_value'] = array(
    'label' => t('Score Requirement Value'),
    'plural label' => t('Score Requirement Values'),
    'description' => t('Score Requirements Values represent a single data point.'),

    'base table' => 'eiti_score_req_value',
    'module' => 'eitientity_score_req_value',

    'entity class' => 'ScoreReqValueEntity',
    'controller class' => 'EntityAPIController',
    'metadata controller class' => 'ScoreReqValueMetadataController',
    'inline entity form' => array(
      'controller' => 'ScoreReqValueInlineEntityFormController',
    ),

    'static cache' => FALSE,
    'fieldable' => FALSE,

    'access callback' => 'eitientity_score_req_value_access',
    'uri callback' => 'entity_class_uri',

    'entity keys' => array(
      'id' => 'id',
    ),

  );

  return $entity_info;
}

/**
 * Access callback for custom score_req_value entities.
 *
 * @param $op
 * @param ImplementingCountryEntity $entity
 * @param stdClass $account
 * @param $entity_type
 *
 * @return boolean
 *   Whether access is allowed or not. If the entity type does not specify any
 *   access information, NULL is returned.
 */
function eitientity_score_req_value_access($op, $entity = NULL, $account = NULL, $entity_type) {
  $operations = array('administer', 'create', 'view', 'edit', 'update', 'delete');
  if (!in_array($op, $operations, TRUE)) {
    // If the $op was not one of the supported ones, we return access denied.
    return FALSE;
  }

  if ($op == 'view') {
    $allow = FALSE;
    if (user_access("$entity_type entity administer") || user_access("$entity_type entity $op")) {
      $allow = TRUE;
    }
    return $allow;
  }

  $op = 'administer';
  if (user_access("$entity_type entity $op")) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Implements hook_permission().
 */
function eitientity_score_req_value_permission() {
  $perms = array();

  $entity_type = 'score_req_value';
  $entity_info = entity_get_info($entity_type);

  $operations = array('administer', 'view');
  foreach ($operations as $op) {
    $permission_string = "$entity_type entity $op";
    $action = ucfirst($op);
    $t_args = array('%entity' => $entity_info['plural label']);
    $perms[$permission_string] = array(
      'title' => t("$action %entity", $t_args),
    );

    if ($op == 'administer') {
      $perms[$permission_string]['restrict access'] = TRUE;
    }
  }

  return $perms;
}

/**
 * @param string $entity_type
 * @param ScoreReqValueEntity $entity
 *
 * @return string
 */
function eitientity_score_req_value_get_score_req_label($entity_type, $entity) {
  if (!empty($entity->score_req_id)) {
    /** @var ScoreReqEntity $score_req_entity */
    $score_req_entity = entity_load_single('score_req', $entity->score_req_id);

    // Add score_req group name as prefix on IEF.
    $code = '';
    if (!empty($score_req_entity->code)) {
      $code = ' <b>[#' . filter_xss($score_req_entity->code) . ']</b>';
    }

    if (!empty($score_req_entity)) {
      return filter_xss($score_req_entity->label()) . $code;
    }
  }

  return t('N/A, please <strong>EDIT</strong>');
}

/**
 * @param string $entity_type
 * @param ScoreReqValueEntity $entity
 *
 * @return string
 */
function eitientity_score_req_value_get_score_req_value_value($entity_type, $entity) {
  if (empty($entity->score_req_id)) {
    return '';
  }

  /** @var ScoreReqEntity $score_req_entity */
  $score_req_entity = entity_load_single('score_req', $entity->score_req_id);
  if (empty($score_req_entity)) {
    return t('N/A, please <strong>EDIT</strong>');
  }

  if ($entity->value !== '') {
    return _eitientity_score_req_value_get_value_options($entity->value);
  }
  else {
    return '<em>' . t('No Specified') . '</em>';
  }
}

/**
 * @param string $entity_type
 * @param ScoreReqValueEntity $entity
 *
 * @return string
 */
function eitientity_score_req_value_get_score_req_category($entity_type, $entity) {
  if (empty($entity->score_req_id)) {
    return '';
  }

  /** @var ScoreReqEntity $score_req_entity */
  $score_req_entity = entity_load_single('score_req', $entity->score_req_id);
  if (empty($score_req_entity)) {
    return t('N/A, please <strong>EDIT</strong>');
  }
  $score_req_emw = entity_metadata_wrapper('score_req', $score_req_entity);
  if ($category = $score_req_emw->field_score_req_category->value()) {
    return $category->name;
  }
  else {
    return '<em>' . t('N/A') . '</em>';
  }
}

/**
 * @return array
 */
function eitientity_score_req_value_get_score_req_information() {
  $information = &drupal_static(__FUNCTION__);

  if (!empty($information)) {
    return $information;
  }

  $score_req_groups_mapping = array();
  $score_req_options = array();
  $score_req_attributes = array();

  // Get a list of domains sorted by weight and name.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'score_req');
  $query->propertyOrderBy('code');
  $results = $query->execute();

  foreach ($results['score_req'] as $result) {
    /** @var ScoreReqEntity $score_req */
    $score_req = entity_load_single('score_req', $result->id);
    $score_req_attributes[$score_req->identifier()] = array(
      'data-score_req-code' => check_plain($score_req->code),
    );
    $score_req_emw = entity_metadata_wrapper('score_req', $score_req);
    $score_req_label = filter_xss($score_req->label()) . ' [#' . check_plain($score_req->code) . ']';
    $category = $score_req_emw->field_score_req_category->value();
    if (!empty($category)) {
      $score_req_label .= ' - ' . $category->name;
    }
    $score_req_options[$score_req->identifier()] = $score_req_label;
  }

  $information = array(
    'options' => $score_req_options,
    'attributes' => $score_req_attributes
  );
  return $information;
}

/**
 * Returns an array of all possible options (aka: levels of progress).
 *
 * @param $id
 *  ID of the value, specify it to see the label of it.
 *
 * @return array|string
 *  Returns either array of options or a label as a string.
 */
function _eitientity_score_req_value_get_value_options($id = NULL) {
  $options = array(
    EITIENTITY_SCORE_REQ_VALUE_NO => t('No Progress'),
    EITIENTITY_SCORE_REQ_VALUE_INADEQUATE => t('Inadequate'),
    EITIENTITY_SCORE_REQ_VALUE_MEANINGFUL => t('Meaningful'),
    EITIENTITY_SCORE_REQ_VALUE_SATISFACTORY => t('Satisfactory'),
    EITIENTITY_SCORE_REQ_VALUE_BEYOND => t('Beyond'),
    EITIENTITY_SCORE_REQ_VALUE_NA => t('Doesn\'t Apply'),
  );

  if ($id == NULL) {
    return $options;
  }
  else {
    return $options[$id];
  }
}
/**
 * Returns an array of all possible direction of progress options.
 *
 * @param $id
 *  ID of the value, specify it to see the label of it.
 *
 * @return array|string
 *  Returns either array of options or a label as a string.
 */
function _eitientity_score_req_value_get_dir_of_progress_options($id = NULL) {
  $options = array(
    EITIENTITY_SCORE_REQ_DIR_OF_PROGRESS_SAME => t('Same'),
    EITIENTITY_SCORE_REQ_DIR_OF_PROGRESS_BETTER => t('Better'),
    EITIENTITY_SCORE_REQ_DIR_OF_PROGRESS_WORSE => t('Worse'),
    EITIENTITY_SCORE_REQ_DIR_OF_PROGRESS_EMPTY => t('Empty')
  );

  if ($id == NULL) {
    return $options;
  }
  else {
    return $options[$id];
  }
}

/**
 * Provides theme registration for themes across .inc files.
 */
function eitientity_score_req_value_theme() {
  return array(
    // From form.inc.
    'select_score_reqs' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Returns HTML for a select form element, with extra attributes.
 *
 * @see theme_select()
 *
 * @param $variables
 *   An associative array containing:
 *   - element: An associative array containing the properties of the element.
 *     Properties used: #title, #value, #options, #description, #extra,
 *     #multiple, #required, #name, #attributes, #size.
 *
 * @return string
 */
function theme_select_score_reqs($variables) {
  $element = $variables['element'];
  element_set_attributes($element, array('id', 'name', 'size'));
  _form_set_class($element, array('form-select'));

  return '<select' . drupal_attributes($element['#attributes']) . '>' . eitientity_score_req_value_form_select_options($element) . '</select>';
}


/**
 * @see form_select_options()
 *
 * @return string
 */
function eitientity_score_req_value_form_select_options($element, $choices = NULL) {
  if (!isset($choices)) {
    $choices = $element['#options'];
  }
  // array_key_exists() accommodates the rare event where $element['#value'] is NULL.
  // isset() fails in this situation.
  $value_valid = isset($element['#value']) || array_key_exists('#value', $element);
  $value_is_array = $value_valid && is_array($element['#value']);
  $options = '';
  foreach ($choices as $key => $choice) {
    if (is_array($choice)) {
      $options .= '<optgroup label="' . check_plain($key) . '">';
      $options .= eitientity_score_req_value_form_select_options($element, $choice);
      $options .= '</optgroup>';
    }
    elseif (is_object($choice)) {
      $options .= form_select_options($element, $choice->option);
    }
    else {
      $key = (string) $key;
      if ($value_valid && (!$value_is_array && (string) $element['#value'] === $key || ($value_is_array && in_array($key, $element['#value'])))) {
        $selected = ' selected="selected"';
      }
      else {
        $selected = '';
      }

      $choice_attributes = array();
      if (isset($element['#options_attributes'][$key])) {
        $choice_attributes = $element['#options_attributes'][$key];
      }

      $options .= '<option value="' . check_plain($key) . '"' . $selected . drupal_attributes($choice_attributes) . '>' . check_plain($choice) . '</option>';
    }
  }
  return $options;
}
