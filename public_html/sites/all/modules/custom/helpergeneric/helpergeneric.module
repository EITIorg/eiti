<?php
/**
 * @file
 * Custom generic helper module.
 */

include_once 'helpergeneric.elements.inc';
include_once 'helpergeneric.forms.inc';
include_once 'helpergeneric.formatter.inc';

/**
 * Determines if we should cleanup the UI in a way that developers can disable.
 *
 * NOTE: This is NOT for security, you should still set proper access settings.
 */
function helpergeneric_cleanup_ui() {
  // Allow anyone with the cookie to force ui cleanup settings.
  if (isset($_COOKIE['helpergeneric_cleanup_ui_force'])) {
    return (bool) $_COOKIE['helpergeneric_cleanup_ui_force'];
  }

  // If variable is set, force ui cleanup settings only for UID1.
  $forced_value = variable_get('helpergeneric_cleanup_ui_force', NULL);
  if ($GLOBALS['user']->uid == 1 && isset($forced_value)) {
    return (bool) $forced_value;
  }

  return TRUE;
}

/**
 * Implements hook_menu().
 */
function helpergeneric_menu() {
  $items = array();

  $items['admin/settings'] = array(
    'title' => 'Settings',
    'description' => 'Administer Project settings.',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('helpergeneric administer settings'),
    'weight' => 30,
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/settings/ui'] = array(
    'title' => 'UI Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('helpergeneric_ui_settings_form'),
    'access arguments' => array('helpergeneric administer settings'),
    'file' => 'helpergeneric.admin.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/settings/generic'] = array(
    'title' => 'Generic settings',
    'description' => 'Project generic settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('helpergeneric_settings_form'),
    'access arguments' => array('helpergeneric administer settings'),
    'file' => 'helpergeneric.admin.inc',
    'weight' => -32,
  );
  // Used to expose contextual links on site name/logo.
  $items['admin/settings/generic/edit'] = array(
    'title' => 'Configure',
    'weight' => -10,
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  $items['admin/settings/main-menu'] = array(
    'title' => 'Edit Main menu',
    'description' => 'Edit the main menu links.',
    'page callback' => 'drupal_goto',
    'page arguments' => array('admin/structure/menu/manage/main-menu'),
    'access arguments' => array('administer menu'),
    'weight' => -19,
  );

  $items['admin/settings/user-menu'] = array(
    'title' => 'Edit User menu',
    'description' => 'Edit the user menu links.',
    'page callback' => 'drupal_goto',
    'page arguments' => array('admin/structure/menu/manage/user-menu'),
    'access arguments' => array('administer menu'),
    'weight' => -18,
  );

  $items['admin/settings/menu-footer'] = array(
    'title' => 'Edit Footer menu',
    'description' => 'Edit the footer menu links.',
    'page callback' => 'drupal_goto',
    'page arguments' => array('admin/structure/menu/manage/menu-footer'),
    'access arguments' => array('administer menu'),
    'weight' => -18,
  );

  return $items;
}

/**
 * Implements hook_htmlpurifier_info()
 * @see: http://htmlpurifier.org/live/configdoc/plain.html
 */
function helpergeneric_htmlpurifier_info() {
  $info = array();

  $info['htmlpurifier_custom'] = array(
    'name' => 'Custom HTML Purifier Settings',
    'description' => 'Provides some default configuration. Turn off the following Drupal filters: "Convert URLs into links", "Convert line breaks into HTML", "Correct faulty and chopped off HTML".',
    'allowed' => array(
      'Cache.DefinitionImpl',
      'Cache.SerializerPath',

      'Attr.EnableID',
      'AutoFormat.AutoParagraph',
      'AutoFormat.Linkify',
      'Cache.DefinitionImpl',
      'Core.AggressivelyFixLt',
      'HTML.FlashAllowFullScreen',
      'HTML.SafeEmbed',
      'HTML.SafeObject',
      'HTML.SafeIframe',
      'URI.SafeIframeRegexp',
      'URI.DisableExternalResources',
    ),
    'settings' => array(
      // List of allowed link frame targets.
      'Attr.AllowedFrameTargets' => array('_self', '_blank'),

      // Allows the ID attribute in HTML.
      'Attr.EnableID' => FALSE,

      // This directive turns on auto-paragraphing, where double newlines are
      // converted in to paragraphs whenever possible.
      // The same as "Convert line breaks into HTML" Drupal filter.
      'AutoFormat.AutoParagraph' => TRUE,

      // This directive turns on linkification, auto-linking http, ftp and
      // https URLs.
      // The same as "Convert URLs into links" Drupal filter.
      'AutoFormat.Linkify' => TRUE,

      // This directive defines which method to use when caching definitions,
      // the complex data-type that makes HTML Purifier tick
      'Cache.DefinitionImpl' => 'Drupal',

      // If your users make very well-formed HTML, you can set this directive false. :D
      'Core.AggressivelyFixLt' => TRUE,

      // Allows flash applications to be viewed in full screen.
      'HTML.FlashAllowFullScreen' => TRUE,

      // Whether or not to permit embed tags in documents, with a number of
      // extra security features added to prevent script execution.
      'HTML.SafeEmbed' => TRUE,

      // Whether or not to permit object tags in documents, with a number of
      // extra security features added to prevent script execution.
      'HTML.SafeObject' => TRUE,

      // Whether or not to permit iframe tags in untrusted documents.
      // This directive must be accompanied by a whitelist of permitted
      // iframes, such as %URI.SafeIframeRegexp.
      'HTML.SafeIframe' => TRUE,

      // A regex that will be matched against an iframe URI.
      // This directive only has an effect if %HTML.SafeIframe is enabled.
      // 'URI.SafeIframeRegexp' => '%^https?://(www.youtube.com/embed/|player.vimeo.com/video/)%',

      // Disables the embedding of external resources.
      'URI.DisableExternalResources' => TRUE,
    ),

    'weight' => -20,
  );

  return $info;
}

/**
 * Implements hook_menu_alter().
 */
function helpergeneric_menu_alter(&$items) {
  // Change access argument in order to provide more granular permissions.
  $items['admin/structure/menu']['access arguments'] = array('helpergeneric administer menus');
  $items['admin/structure/menu/add']['access arguments'] = array('helpergeneric administer menus');
  $items['admin/structure/menu/manage/%menu/edit']['access arguments'] = array('helpergeneric administer menus');
  $items['admin/structure/menu/manage/%menu/delete']['access arguments'] = array('helpergeneric administer menus');
  $items['admin/structure/menu/settings']['access arguments'] = array('helpergeneric administer menus');

  // Change access on taxonomy pages.
  $items['admin/structure/taxonomy']['access arguments'] = array('helpergeneric access taxonomy');
  $items['admin/structure/taxonomy/%taxonomy_vocabulary_machine_name']['access arguments'] = array('helpergeneric access taxonomy');

  // Change access on user field and display settings. Replaces "administer users".
  $items['admin/config/people/accounts/fields']['access arguments'] = array('helpergeneric user fields');
  $items['admin/config/people/accounts/display']['access arguments'] = array('helpergeneric user fields');

  // Display the "Edit" link in user pages contextual links.
  $items['user/%user/edit']['context'] = MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE;
}

/**
 * Implements hook_permission().
 */
function helpergeneric_permission() {
  return array(
    'helpergeneric administer settings' => array(
      'title' => t('Administer project settings'),
      'description' => t('Allow users to change project specific settings.'),
    ),
    'helpergeneric administer menus' => array(
      'title' => t('Administer menus only.'),
      'description' => t('Allow users to change the menus. This overrides the "administer menu" permission to remove menu editing permission.'),
    ),
    'helpergeneric access taxonomy' => array(
      'title' => t('Access vocabularies only.'),
      'description' => t('Allow users to access the vocabularies.'),
    ),
    'helpergeneric user fields' => array(
      'title' => t('Administer user fields'),
      'restrict access' => TRUE,
      'description' => t('Allow users to access the vocabularies.'),
    ),
  );
}

/**
 * Implements hook_entity_view_alter().
 */
function helpergeneric_entity_view_alter(&$build, $entity_type) {
  if ($entity_type != 'node' || empty($build['#node'])) {
    return;
  }

  /** @var stdClass $entity */
  $entity = $build['#node'];

  // Add contextual links for this node, except when the node is already being
  // displayed on its own page. Modules may alter this behavior (for example,
  // to restrict contextual links to certain view modes) by implementing
  // hook_node_view_alter().
  if ($entity->nid) {
    $build['#contextual_links'][$entity_type] = array($entity_type, array($entity->nid));
  }
}

/**
 * Implements hook_user_view_alter().
 */
function helpergeneric_user_view_alter(&$build) {
  if (empty($build['#account']->uid)) {
    return;
  }

  /** @var stdClass $account */
  $account = $build['#account'];

  // Display user contextual links.
  if (user_edit_access($account) && $build['#view_mode'] == 'full') {
    $build['#contextual_links']['user'] = array('user', array($account->uid));
  }
}
