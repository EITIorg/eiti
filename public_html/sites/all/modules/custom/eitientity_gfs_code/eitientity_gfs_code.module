<?php
/**
 * @file
 * Exposes a custom entity to store gfs_codes.
 */

/**
 * Define administrative URLs.
 */
define('EITIENTITY_GFS_CODE_UI_PATH', 'gfs_code');
define('EITIENTITY_GFS_CODE_ADMIN_UI_PATH', 'admin/structure/gfs_code');

/**
 * Implements hook_entity_info().
 */
function eitientity_gfs_code_entity_info() {
  $entity_info = array();

  $menu_wildcard = '%gfs_code';
  $entity_info['gfs_code'] = array(
    'label' => t('GFS Code'),
    'plural label' => t('GFS Codes'),
    'description' => t('Government Finance Statistics Codes...'),

    'base table' => 'eiti_gfs_code',
    'module' => 'eitientity_gfs_code',

    'entity class' => 'GfsCodeEntity',
    'controller class' => 'EntityAPIController',
    //'i18n controller class' => 'EntityDefaultI18nStringController',

    'static cache' => TRUE,
    'fieldable' => FALSE,

    'access callback' => 'eitientity_gfs_code_access',
    'uri callback' => 'entity_class_uri',

    'entity keys' => array(
      'id' => 'id',
      //'revision' => 'vid',
      'bundle' => 'type',
      'label' => 'name',
      //'language' => 'language',
    ),

    'bundles' => array(),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'bundles callback' => 'eitientity_gfs_code_get_types',

    'admin ui' => array(
      'path' => EITIENTITY_GFS_CODE_ADMIN_UI_PATH,
      'entity path' => EITIENTITY_GFS_CODE_UI_PATH,
      'controller class' => 'GfsCodeEntityUIController',
      'menu wildcard' => $menu_wildcard,
      'file' => 'eitientity_gfs_code.admin.inc',
    ),

    'view modes' => array(
      //'full' => array(
      //  'label' => t('Full'),
      //  'custom settings' => FALSE,
      //),
    ),
  );

  foreach ($entity_info['gfs_code']['bundles callback']() as $type => $bundle_info) {
    $entity_info['gfs_code']['bundles'][$type] = array(
      'label' => $bundle_info['label'],
    );
  }

  return $entity_info;
}

/**
 * Implements hook_admin_paths().
 */
function eitientity_gfs_code_admin_paths() {
  $paths = array(
    EITIENTITY_GFS_CODE_UI_PATH . '/add' => TRUE,
    EITIENTITY_GFS_CODE_UI_PATH . '/add/*' => TRUE,
    EITIENTITY_GFS_CODE_UI_PATH . '/*' => TRUE,
    EITIENTITY_GFS_CODE_UI_PATH . '/*/edit' => TRUE,
    EITIENTITY_GFS_CODE_UI_PATH . '/*/usage' => TRUE,
    EITIENTITY_GFS_CODE_UI_PATH . '/*/delete' => TRUE,
  );

  return $paths;
}

/**
 * Returns a list of gfs_code types.
 */
function eitientity_gfs_code_get_types() {
  $items = array();

  $items['gfs_code'] = array(
    'label' => t('GFS Code'),
    'description' => t('...'),
  );

  return $items;
}

/**
 * Returns the entity type name.
 */
function eitientity_gfs_code_type_get_name($bundle) {
  $bundles = eitientity_gfs_code_get_types();
  return (isset($bundles[$bundle]['label'])) ? $bundles[$bundle]['label'] : FALSE;
}

/**
 * Access callback for custom score entities.
 *
 * @param $op
 * @param GfsCodeEntity $entity
 * @param stdClass $account
 * @param $entity_type
 *
 * @return boolean
 *   Whether access is allowed or not. If the entity type does not specify any
 *   access information, NULL is returned.
 */
function eitientity_gfs_code_access($op, $entity = NULL, $account = NULL, $entity_type) {
  $operations = array('administer', 'access overview', 'create', 'view', 'edit', 'update', 'delete');
  if (!in_array($op, $operations, TRUE)) {
    // If the $op was not one of the supported ones, we return access denied.
    return FALSE;
  }

  if ($op == 'view') {
    $allow = FALSE;
    if (user_access("$entity_type entity administer")) {
      $allow = TRUE;
    }
    else if ($entity->status && user_access("$entity_type entity $op")) {
      $allow = TRUE;
    }

    return $allow;
  }

  $op = 'administer';
  if (user_access("$entity_type entity $op")) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Menu loader function: load an identifier from its path.
 *
 * @see entity_object_load()
 *
 * @param $entity_id
 * @param $entity_type
 * @return mixed
 */
function gfs_code_load($entity_id, $entity_type) {
  return entity_object_load($entity_id, $entity_type);
}
/**
 * Implements hook_permission().
 */
function eitientity_gfs_code_permission() {
  $perms = array();

  $entity_type = 'gfs_code';
  $entity_info = entity_get_info($entity_type);

  $operations = array('administer', 'view');
  foreach ($operations as $op) {
    $permission_string = "$entity_type entity $op";
    $action = ucfirst($op);
    $t_args = array('%entity' => $entity_info['plural label']);
    $perms[$permission_string] = array(
      'title' => t("$action %entity", $t_args),
    );

    if ($op == 'administer') {
      $perms[$permission_string]['restrict access'] = TRUE;
    }
  }

  return $perms;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function eitientity_gfs_code_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link to 'gfs_code/add' on 'admin/content/gfs_code' page.
  if ($root_path == EITIENTITY_GFS_CODE_ADMIN_UI_PATH) {
    $item = menu_get_item(EITIENTITY_GFS_CODE_UI_PATH . '/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * Gets the page title for the passed operation.
 * @see entity_ui_get_page_title()
 */
function eitientity_gfs_code_entity_ui_get_page_title($op, $entity_type, $entity = NULL) {
  module_load_include('inc', 'entity', 'includes/entity.ui');

  $label = entity_label($entity_type, $entity);

  // Get the entity information.
  $entity_info = entity_get_info($entity_type);
  $t_args = array(
    '@entity_type_label' => drupal_strtolower($entity_info['label']),
    '%label' => $label,
  );

  switch ($op) {
    case 'view':
      return $label;
    case 'edit':
      return t('Edit @entity_type_label %label', $t_args);
    case 'clone':
      return t('Clone @entity_type_label %label', $t_args);
    case 'revert':
      return t('Revert @entity_type_label %label', $t_args);
    case 'delete':
      return t('Delete @entity_type_label %label', $t_args);
    case 'export':
      return t('Export @entity_type_label %label', $t_args);
  }
  if (isset($entity)) {
    list(, , $bundle) = entity_extract_ids($entity_type, $entity);
  }
  else {
    $bundle = NULL;
  }
  return entity_ui_get_action_title($op, $entity_type, $bundle);
}

/**
 * Returns a list of gfs_codes by type.
 *
 * @param string $bundle
 * @return array
 */
function eitientity_gfs_code_get_by_bundle($bundle) {
  $entities = array();

  // Get a list of domains sorted by weight and name.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'gfs_code');
  $query->propertyCondition('type', $bundle);
  $query->propertyOrderBy('name');
  $results = $query->execute();

  if (!empty($results['gfs_code'])) {
    $ids = array_keys($results['gfs_code']);
    $entities = entity_load('gfs_code', $ids);
  }

  return $entities;
}

/**
 * Returns a GFS Codes tree.
 *
 * @param int $parent
 *   The term ID under which to generate the tree. If 0, generate the tree
 *   for the entire vocabulary.
 * @param $max_depth
 *   The number of levels of the tree to return. Leave NULL to return all levels.
 *
 * @return array
 */
function eitientity_gfs_code_get_tree($parent = 0, $max_depth = NULL) {
  $children = &drupal_static(__FUNCTION__, array());
  $parents = &drupal_static(__FUNCTION__ . ':parents', array());
  $gfs_codes = &drupal_static(__FUNCTION__ . ':gfs_codes', array());

  $query = db_select('eiti_gfs_code', 'gc');
  $result = $query
    ->fields('gc')
    ->orderBy('gc.weight')
    ->orderBy('gc.name')
    ->execute();

  foreach ($result as $gfs_code) {
    $children[(string) $gfs_code->parent][] = (string) $gfs_code->id;
    $parents[(string) $gfs_code->id][] = (string) $gfs_code->parent;
    $gfs_codes[(string) $gfs_code->id] = $gfs_code;
  }

  $max_depth = (!isset($max_depth)) ? count($children) : $max_depth;
  $tree = array();

  // Keeps track of the parents we have to process, the last entry is used
  // for the next processing step.
  $process_parents = array();
  $process_parents[] = $parent;

  // Loops over the parent terms and adds its children to the tree array.
  // Uses a loop instead of a recursion, because it's more efficient.
  while (count($process_parents)) {
    $parent = array_pop($process_parents);
    // The number of parents determines the current depth.
    $depth = count($process_parents);
    if ($max_depth > $depth && !empty($children[$parent])) {
      $has_children = FALSE;
      $child = current($children[$parent]);
      do {
        if (empty($child)) {
          break;
        }
        $gfs_code = $gfs_codes[$child];
        if (isset($parents[$gfs_code->id])) {
          // Clone the term so that the depth attribute remains correct
          // in the event of multiple parents.
          $gfs_code = clone $gfs_code;
        }
        $gfs_code->depth = $depth;
        unset($gfs_code->parent);
        $gfs_code->parents = $parents[$gfs_code->id];
        $tree[] = $gfs_code;
        if (!empty($children[$gfs_code->id])) {
          $has_children = TRUE;

          // We have to continue with this parent later.
          $process_parents[] = $parent;
          // Use the current term as parent for the next iteration.
          $process_parents[] = $gfs_code->id;

          // Reset pointers for child lists because we step in there more often
          // with multi parents.
          reset($children[$gfs_code->id]);
          // Move pointer so that we get the correct term the next time.
          next($children[$parent]);
          break;
        }
      } while ($child = next($children[$parent]));

      if (!$has_children) {
        // We processed all terms in this hierarchy-level, reset pointer
        // so that this function works the next time it gets called.
        reset($children[$parent]);
      }
    }
  }

  return $tree;
}

/**
 * @return array
 */
function eitientity_gfs_code_get_gfs_code_information() {
  $information = &drupal_static(__FUNCTION__);

  if (!empty($information)) {
    return $information;
  }

  $results = eitientity_gfs_code_get_tree();
  if (empty($results)) {
    return array();
  }

  foreach ($results as $result) {
    $label = ' [' . check_plain($result->code) . '] ' . filter_xss($result->name);
    $information['options'][$result->id] = str_repeat('-', $result->depth) . $label;
  }

  return $information;
}
