<?php
/**
 * @file
 * Exposes a custom entity to store Organisations.
 */

/**
 * Define administrative URLs.
 */
define('EITIENTITY_ORGANISATION_UI_PATH', 'organisation');
define('EITIENTITY_ORGANISATION_ADMIN_UI_PATH', 'admin/content/organisation');
define('EITIENTITY_ORGANISATION_BUNDLE_ADMIN_UI_PATH', 'admin/structure/organisation');

/**
 * Implements hook_entity_info().
 */
function eitientity_organisation_entity_info() {
  $entity_info = array();

  $menu_wildcard = '%organisation';
  $entity_info['organisation'] = array(
    'label' => t('Organisation'),
    'plural label' => t('Organisations'),
    'description' => t('Organisations...'),

    'base table' => 'eiti_organisation',
    'module' => 'eitientity_organisation',

    'entity class' => 'OrganisationEntity',
    'controller class' => 'EntityAPIController',
    //'i18n controller class' => 'EntityDefaultI18nStringController',

    'static cache' => TRUE,
    'fieldable' => TRUE,

    'access callback' => 'eitientity_organisation_access',
    'uri callback' => 'entity_class_uri',

    'entity keys' => array(
      'id' => 'id',
      //'revision' => 'vid',
      'bundle' => 'type',
      'label' => 'name',
      //'language' => 'language',
    ),

    'bundles' => array(),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'bundles callback' => 'eitientity_organisation_get_types',

    'admin ui' => array(
      'path' => EITIENTITY_ORGANISATION_ADMIN_UI_PATH,
      'entity path' => EITIENTITY_ORGANISATION_UI_PATH,
      'bundle path' => EITIENTITY_ORGANISATION_BUNDLE_ADMIN_UI_PATH,
      'controller class' => 'OrganisationEntityUIController',
      'menu wildcard' => $menu_wildcard,
      'file' => 'eitientity_organisation.admin.inc',
    ),

    'view modes' => array(
      //'full' => array(
      //  'label' => t('Full'),
      //  'custom settings' => FALSE,
      //),
    ),
  );

  foreach ($entity_info['organisation']['bundles callback']() as $type => $bundle_info) {
    $entity_info['organisation']['bundles'][$type] = array(
      'label' => $bundle_info['label'],
      'admin' => array(
        'path' => EITIENTITY_ORGANISATION_BUNDLE_ADMIN_UI_PATH . '/manage/' . $type,
      ),
    );
  }

  return $entity_info;
}

/**
 * Implements hook_admin_paths().
 */
function eitientity_organisation_admin_paths() {
  $paths = array(
    EITIENTITY_ORGANISATION_UI_PATH . '/add' => TRUE,
    EITIENTITY_ORGANISATION_UI_PATH . '/add/*' => TRUE,
    //EITIENTITY_ORGANISATION_UI_PATH . '/*' => TRUE,
    EITIENTITY_ORGANISATION_UI_PATH . '/*/edit' => TRUE,
    EITIENTITY_ORGANISATION_UI_PATH . '/*/usage' => TRUE,
    EITIENTITY_ORGANISATION_UI_PATH . '/*/delete' => TRUE,
  );

  return $paths;
}

/**
 * Returns a list of organisation types.
 */
function eitientity_organisation_get_types() {
  $items = array();

  $items['agency'] = array(
    'label' => t('Government Agency'),
    'description' => t('A simple entity for storing government agency.'),
  );

  $items['company'] = array(
    'label' => t('Company'),
    'description' => t('A simple entity for storing companies.'),
  );

  return $items;
}

/**
 * Returns the entity type name.
 */
function eitientity_organisation_type_get_name($bundle) {
  $bundles = eitientity_organisation_get_types();
  return (isset($bundles[$bundle]['label'])) ? $bundles[$bundle]['label'] : FALSE;
}

/**
 * Access callback for custom organisation entities.
 *
 * @param $op
 * @param OrganisationEntity $entity
 * @param stdClass $account
 * @param $entity_type
 *
 * @return boolean
 *   Whether access is allowed or not. If the entity type does not specify any
 *   access information, NULL is returned.
 */
function eitientity_organisation_access($op, $entity = NULL, $account = NULL, $entity_type) {
  $operations = array('administer', 'access overview', 'create', 'view', 'edit', 'update', 'delete');
  if (!in_array($op, $operations, TRUE)) {
    // If the $op was not one of the supported ones, we return access denied.
    return FALSE;
  }

  if ($op == 'view') {
    $allow = FALSE;
    if (user_access("$entity_type entity administer")) {
      $allow = TRUE;
    }
    else if ($entity->status && user_access("$entity_type entity $op")) {
      $allow = TRUE;
    }

    return $allow;
  }

  $op = 'administer';
  if (user_access("$entity_type entity $op")) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Menu loader function: load an identifier from its path.
 *
 * @see entity_object_load()
 *
 * @param $entity_id
 * @param $entity_type
 * @return mixed
 */
function organisation_load($entity_id, $entity_type) {
  return entity_object_load($entity_id, $entity_type);
}
/**
 * Implements hook_permission().
 */
function eitientity_organisation_permission() {
  return _helperentity_entity_type_permission('organisation', array('administer', 'create', 'view', 'edit', 'delete'));
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function eitientity_organisation_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link to 'organisation/add' on 'admin/content/organisation' page.
  if ($root_path == EITIENTITY_ORGANISATION_ADMIN_UI_PATH) {
    $item = menu_get_item(EITIENTITY_ORGANISATION_UI_PATH . '/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * Gets the page title for the passed operation.
 * @see entity_ui_get_page_title()
 */
function eitientity_organisation_entity_ui_get_page_title($op, $entity_type, $entity = NULL) {
  module_load_include('inc', 'entity', 'includes/entity.ui');

  $label = entity_label($entity_type, $entity);

  // Get the entity information.
  $entity_info = entity_get_info($entity_type);
  $t_args = array(
    '@entity_type_label' => drupal_strtolower($entity_info['label']),
    '%label' => $label,
  );

  switch ($op) {
    case 'view':
      return $label;
    case 'edit':
      return t('Edit @entity_type_label %label', $t_args);
    case 'clone':
      return t('Clone @entity_type_label %label', $t_args);
    case 'revert':
      return t('Revert @entity_type_label %label', $t_args);
    case 'delete':
      return t('Delete @entity_type_label %label', $t_args);
    case 'export':
      return t('Export @entity_type_label %label', $t_args);
  }
  if (isset($entity)) {
    list(, , $bundle) = entity_extract_ids($entity_type, $entity);
  }
  else {
    $bundle = NULL;
  }
  return entity_ui_get_action_title($op, $entity_type, $bundle);
}

/**
 * Helper function that returns existing organisation by looking up
 * its name.
 *
 * @param string $name
 *   Name of the organisation.
 *
 * @return bool|array
 *   Loaded entities if found or FALSE.
 */
function eitientity_organisation_lookup_by_name($name) {
  $efq = new EntityFieldQuery();
  $efq_results = $efq->entityCondition('entity_type', 'organisation')
    ->propertyCondition('name', $name, 'LIKE')
    ->execute();

  if (!empty($efq_results['organisation'])) {
    $ids = array_keys($efq_results['organisation']);
    $entities = entity_load('organisation', $ids);
    return $entities;
  }
  return FALSE;
}
