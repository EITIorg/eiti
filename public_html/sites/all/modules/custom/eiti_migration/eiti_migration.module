<?php

/**
 * @file
 *
 * Main .module file, for migrations doesn't have to have anything inside.
 *
 * But we'll use it to hold basic helper functions used for migrations and
 * other migration-related functionality.
 */

/**
 * Implements hook_menu().
 */
function eiti_migration_menu() {
  // Legacy System configs used for migration.
  $items['admin/content/migrate/configure-legacy'] = array(
    'title' => 'Legacy System',
    'type' => MENU_LOCAL_TASK,
    'description' => 'Configure migration settings for the Legacy System.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eiti_migration_settings'),
    'access arguments' => array(MIGRATE_ACCESS_ADVANCED),
    'file' => 'eiti_migration.admin.inc',
    'weight' => 200,
  );
  // Import System configs used for migration.
  $items['admin/content/migrate/spreadsheets'] = array(
    'title' => 'Spreadsheets Import',
    'type' => MENU_LOCAL_TASK,
    'description' => 'Configure migration settings for the Spreadsheets import process.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eiti_migration_spreadsheets_import_settings'),
    'access arguments' => array(MIGRATE_ACCESS_ADVANCED),
    'file' => 'eiti_migration.admin.inc',
    'weight' => 210,
  );
  return $items;
}

/**
 * Implements hook_migrate_overview().
 */
function eiti_migration_migrate_overview() {
  return t('Please <a href="admin/content/migrate/configure-legacy">configure the Legacy System settings</a> on this machine before you run or register your migrations.');
}

/**
 * This function imports spreadsheet files into Drupal as managed Report files.
 *
 * @param array $files
 *  Array of full-defined paths to spreadsheet files.
 *
 * @param array $context
 *  Batch operation context.
 */
function eiti_migration_spreadsheets_import($files, &$context) {
  global $user;
  if (!isset($context['sandbox']['current'])) {
    $context['sandbox']['count'] = 0;
    $context['sandbox']['current'] = 0;
  }
  // Get the total amount of items to process.
  if (!isset($context['sandbox']['total'])) {
    $context['sandbox']['total'] = count($files);
  }

  // Now, import the file.
  $path = $files[$context['sandbox']['current']];
  $new_filename = drupal_basename($path);
  $new_filename = str_replace(' ', '_', $new_filename);
  $new_filename = strtolower($new_filename);
  $destination = 'public://spreadsheets/' . $new_filename;
  if ($new_uri = file_unmanaged_copy($path , $destination, FILE_EXISTS_REPLACE)) {
    $file = new stdClass();
    $file->fid = NULL;
    $file->uri = $new_uri;
    $file->uid = $user->uid;
    $file->filename = drupal_basename($new_uri);
    $file->status = FILE_STATUS_PERMANENT;
    // Just check if there's already a record, if there is, update it.
    $existing_files = file_load_multiple(array(), array('uri' => $new_uri));
    if (count($existing_files)) {
      $existing = reset($existing_files);
      $file->fid = $existing->fid;
      $file->filename = $existing->filename;
      $file->status = FILE_STATUS_PERMANENT;
    }

    file_save($file);
    $context['message'] = t('Imported to Drupal: @path.', array('@path' => $new_uri));
    $context['results'][] = $new_uri;
  }
  else {
    $context['message'] = t('Failed to import to Drupal: @path.', array('@path' => $path));
  }

  $context['sandbox']['count']++;
  $context['sandbox']['current']++;

  if ($context['sandbox']['count'] != $context['sandbox']['total']) {
    $context['finished'] = $context['sandbox']['count'] / $context['sandbox']['total'];
  }
}

/**
 * Simple batch operation callback function that just informes how many files were
 * imported successfully.
 */
function eiti_migration_spreadsheets_import_finished($success, $results, $operations) {
  if ($success) {
    // Here we do something meaningful with the results.
    $message = t("!count files were imported.", array(
      '!count' => count($results),
    ));
    $message .= theme('item_list', array('items' => $results));
    drupal_set_message($message);
  }
  else {
    $error_operation = reset($operations);
    $message = t('An error occurred while processing %error_operation with arguments: @arguments', array(
      '%error_operation' => $error_operation[0],
      '@arguments' => print_r($error_operation[1], TRUE)
    ));
    drupal_set_message($message, 'error');
  }
}

/**
 * Small custom function that runs an import process (used as a batch callback).
 *
 * @param $migration
 *   Migration machine name.
 * @param $arguments
 *   New arguments with which to run an import with.
 * @param $context
 *   Batch operation context.
 */
function _eiti_migration_spreadsheet_dynamic_upload_import($migration, $arguments, &$context) {
  Migration::registerMigration($migration, $migration, $arguments);
  drupal_static_reset('getInstance');
  $migrationInstance = Migration::getInstance($migration);
  $result = $migrationInstance->processImport();

  $context['message'] = t('Migration @migration: running.', array('@migration' => $migration));
  $context['results'][] = $result;
  $context['finished'] = 1;
}

/**
 * Small callback that figures out what items should be rolled back, prior to the
 * import process.
 *
 * @param $migration
 *  Migration machine name.
 * @param $summary_data
 *  Summary data object.
 * @param $old_summary_data_hash
 *  Hash (or Migration ID) of the old summary data - helps identify orphan rows.
 * @param bool $delete_file
 *  Indicates whether we should delete the old report or not.
 * @param $context
 *  The batch operation context.
 */
function _eiti_migration_spreadsheet_dynamic_upload_rollback($migration, $summary_data, $old_summary_data_hash, $delete_file = FALSE, &$context) {
  $migrationInstance = Migration::getInstance($migration);
  $summary_data_id = $summary_data->id;

  if ($migration == 'EITISummaryDataMigration') {
    // If that's an EDIT, we rollback previous summary data and remove it from the map.
    $migrationInstance->getDestination()->bulkRollback(array($summary_data_id));
    $migrationInstance->getMap()->deleteDestination(array($summary_data_id));

    // Delete the file, if the uploaded file has a different name.
    if ($delete_file) {
      $fid = $summary_data->field_sd_report_file['und'][0]['fid'];
      $file = file_load($fid);
      if ($file) {
        file_delete($file, TRUE);
      }
    }
  }
  else {
    $table = $migrationInstance->getMap()->getMapTable();
    $query = db_select($table, 't');
    $query->fields('t');
    $query->condition('sourceid1', $old_summary_data_hash['sourceid1'] . '%', 'LIKE');
    $rollback_ids = $query->execute()->fetchAllKeyed();
    if (!empty($rollback_ids)){
      $migrationInstance->getDestination()->bulkRollback(array_values($rollback_ids));
      $migrationInstance->getMap()->deleteBulk(array_keys($rollback_ids));
    }
  }

  $context['message'] = t('Previously imported content in Migration @migration: rolling back.', array('@migration' => $migration));
  $context['results'][] = TRUE;
  $context['finished'] = 1;
}

/**
 * Generate local temp files to provide compatibility for s3
 *
 * @param array $files
 *   Files to generate temps for.
 * @param array &$context
 *   Batch context.
 */
function _eiti_migration_spreadsheet_dynamic_upload_generate_temp(array $files, array &$context) {
  foreach ($files as $file) {
    _eiti_migration_s3_create_local_temp_file($file->uri, $file->temp_uri);
  }
}

/**
 * Clean up local temp files created for spreadsheet upload.
 *
 * @param array $files
 *   Files to clean up.
 * @param array &$context
 *   Batch context.
 */
function _eiti_migration_spreadsheet_dynamic_upload_cleanup(array $files, array &$context) {
  foreach ($files as $file) {
    file_unmanaged_delete($file);
  }
}

/**
 * Simple batch operation callback function that just informs how many files were
 * imported successfully.
 */
function eiti_migration_spreadsheets_dynamic_upload_finished($success, $results, $operations) {
  if ($success) {
    // Here we do something meaningful with the results.
    $message = t("!count operations successfully executed.", array(
      '!count' => count($results),
    ));
    drupal_set_message($message);
  }
  else {
    $error_operation = reset($operations);
    $message = t('An error occurred while processing %error_operation with arguments: @arguments', array(
      '%error_operation' => $error_operation[0],
      '@arguments' => print_r($error_operation[1], TRUE)
    ));
    drupal_set_message($message, 'error');
  }
}

/**
 * Small helper function that looks up a cell in a sheet, that matches at least
 * one of the given values in $values.
 *
 * Based on findPositionInSheet() in eiti_migration.spreadsheet.inc.
 */
function eiti_migration_findPositionInSheet($sheet, $values, $final = NULL, $max_row = NULL, $max_col = NULL) {
  if (!empty($sheet)) {
    $highestRow = $sheet->getHighestRow();
    $highestColumn = $sheet->getHighestColumn();
    $highestColumnIndex = PHPExcel_Cell::columnIndexFromString($highestColumn);
    if ($max_row) {
      $highestRow = $max_row;
    }
    if ($max_col) {
      $highestColumnIndex = $max_col;
    }
    for ($row = 0; $row < $highestRow; $row++) {
      for ($column = 0; $column < $highestColumnIndex; $column++) {
        $cellValue = trim($sheet->getCellByColumnAndRow($column, $row)->getValue());
        foreach ($values as $value) {
          if (strtolower($cellValue) == strtolower($value)) {
            $position['row'] = $row;
            $position['column'] = $column;
            return $position;
          }
          // Finally check the $final variable.
          if ($final && (strpos($cellValue, $final) !== FALSE)) {
            $position['row'] = $row;
            $position['column'] = $column;
            return $position;
          }
        }
      }
    }
  }
  return FALSE;
}

/**
 * Given the sector name returns it's tid (the term will be created if it does not already exist).
 */
function eiti_migration_get_sector_tid($name) {
  $sector_tid = FALSE;
  if ($name) {
    $sector_str = trim($name);
    $vocabulary = taxonomy_vocabulary_machine_name_load('company_sectors');

    if (!empty($sector_str)) {
      // If we still have a candidate, then we try first to re-use
      // possibly existing one.
      $sector_str = ucfirst($sector_str);
      $terms = taxonomy_get_term_by_name($sector_str, 'company_sectors');
      $term = reset($terms);
      if ($term) {
        $sector_tid = $term->tid;
      }
      else {
        // And if we have no such term, we create one.
        $term = new stdClass();
        $term->name = $sector_str;
        $term->vid = $vocabulary->vid;
        taxonomy_term_save($term);
        $sector_tid = $term->tid;
      }
    }
  }
  return $sector_tid;
}

/**
 * Given the commodity names returns their tids (terms will be created if they do not already exist).
 */
function eiti_migration_get_commodity_tids($names) {
  $commodity_tids = array();
  if ($names) {
    $commodities_str = $names;
    $vocabulary = taxonomy_vocabulary_machine_name_load('company_commodities');

    $commodities_str = strtolower($commodities_str);
    $commodities_str = str_replace("'", '', $commodities_str);

    $commodities_str = str_replace(' and ', ',', $commodities_str);
    $commodities_str = str_replace('&', ',', $commodities_str);
    $commodities_str = str_replace(' or ', ',', $commodities_str);
    $commodities_str = str_replace('/', ',', $commodities_str);
    $commodities_str = str_replace(';', ',', $commodities_str);
    $commodities_str = str_replace('(', ',', $commodities_str);
    $commodities_str = str_replace(')', ',', $commodities_str);
    $commodities_str = str_replace(' - ', ',', $commodities_str);

    $candidates = explode(',', $commodities_str);
    foreach ($candidates as $candidate) {
      $candidate = trim($candidate);
      if (!empty($candidate)) {
        // If we still have a candidate, then we try first to re-use
        // possibly existing one.
        $candidate = ucfirst($candidate);
        $terms = taxonomy_get_term_by_name($candidate, 'company_commodities');
        $term = reset($terms);
        if ($term) {
          $commodity_tids[] = $term->tid;
        }
        else {
          // And if we have no such term, we create one.
          $term = new stdClass();
          $term->name = $candidate;
          $term->vid = $vocabulary->vid;
          taxonomy_term_save($term);
          $commodity_tids[] = $term->tid;
        }
      }
    }
  }
  return array_unique($commodity_tids);
}

/**
 * Fetches a specific sheet from the PHPExcel.
 *
 * Based on getSheet() from eiti_migration.spreadsheet.inc.
 */
function eiti_migration_getSheet($excel, $sheet_type) {
  $sheet = NULL;

  // Check the book.
  if (empty($excel)) {
    return NULL;
  }

  // Figure out whether we have "Introduction" tab or not.
  $introSheet = $excel->getSheetByName('Introduction');
  $indexAdjustments = 0;
  if (empty($introSheet)) {
    $indexAdjustments = -1;
  }

  switch ($sheet_type) {
    case 'about':
      $sheet = $excel->getSheetByName('1. About');
      if (empty($sheet)) {
        // Second try, already via index.
        $sheet = $excel->getSheet(1 + $indexAdjustments);
      }
      break;

    case 'context':
      $sheet = $excel->getSheetByName('2. Contextual');
      if (empty($sheet)) {
        // Second try, already via index.
        $sheet = $excel->getSheet(2 + $indexAdjustments);
      }
      break;

    case 'revenues':
      $sheet = $excel->getSheetByName('3. Revenues');
      if (empty($sheet)) {
        // Second try, already via index.
        $sheet = $excel->getSheet(3 + $indexAdjustments);
      }
      break;
  }

  return $sheet;
}

/**
 * Small helper function that checks if the value is empty or not.
 *
 * Based on checkEmptyValue() in eiti_migration.generic.inc.
 */
function eiti_migration_checkEmptyValue($value) {
  // Simple empty check.
  if (empty($value)) {
    return TRUE;
  }

  switch (strtolower($value)) {
    case 'not applicable':
    case 'not available':
    case 'notavailable':
    case 'n/a':
    case 'na':
    case '<text>':
    case '<url>':
    case '...':
    case '…':
    case '-':
    case '':
      $is_empty = TRUE;
      break;

    default:
      $is_empty = FALSE;
      break;
  }

  // More checking <tag>.
  if ($is_empty === FALSE) {
    if (preg_match('/<.+?>/', $value)) {
      $is_empty = TRUE;
    }
  }
  return $is_empty;
}

/**
 * Based on findBestMatch() in eiti_migration.generic.inc.
 */
function eiti_migration_findBestMatch($needle, $haystack) {
  $matchRating = array();
  foreach ($haystack as $id => $obj) {
    $match_percent = 0;
    similar_text($needle, $obj->name, $match_percent);
    $matchRating[$id] = $match_percent;
  }
  asort($matchRating);
  end($matchRating);
  $bestMatchingID = key($matchRating);
  if ($matchRating[$bestMatchingID] > 95) {
    return $bestMatchingID;
  }
  return FALSE;
}

/**
 * Based on normalizeUnit() in eiti_migration.generic.inc.
 */
function eiti_migration_normalizeUnit($unit) {
  $normalizedUnit = $unit;
  switch (strtolower($unit)) {
    case 'us$':
    case 'us $':
    case 'usd':
      $normalizedUnit = 'USD';
      break;
    case 'million us $':
    case 'million $':
      $normalizedUnit = 'M USD';
      break;
    case 'million sm3 o.e':
    case 'million sm3':
      $normalizedUnit = 'M Sm3';
      break;
    case 'sm3 o.e.':
    case 'sm3 o.e':
    case 'sm3 oe':
    case 'sm3':
      $normalizedUnit = 'Sm3';
      break;
    case 'bbl':
    case 'barrel':
    case 'barrels':
      $normalizedUnit = 'Barrels';
      break;
    case 'barrels o.e. per day':
      $normalizedUnit = 'Barrels per Day';
      break;
    case 'gj':
      $normalizedUnit = 'Gj';
  }

  return $normalizedUnit;
}

/**
 * Based on normalizeValue() in eiti_migration.generic.inc.
 */
function eiti_migration_normalizeValue($value, &$unit, $rate_to_usd = FALSE) {
  $normalizedValue = $value;
  $normalized = FALSE;

  $million = 1000000;
  $sm3_to_barrels = 6.29; // They always change their mind.
  $barrels_per_day_to_year = 365.242199;
  $barrels_to_sm3 = 0.15898757;
  $gj_to_sm3 = 35.5;
  switch ($unit) {
    case 'USD':
      $normalizedValue = $value;
      $normalized = TRUE;
      break;

    case 'M USD':
      $normalizedValue = $value * $million;
      $normalized = TRUE;
      $unit = 'USD';
      break;

    case 'Barrels per Day':
      // Fluids per day => per year.
      $normalizedValue = $value * $barrels_per_day_to_year * $barrels_to_sm3;
      $normalized = TRUE;
      $unit = 'Sm3';
      break;

    case 'Barrels':
      $normalizedValue = $value * $barrels_to_sm3;
      $normalized = TRUE;
      $unit = 'Sm3';
      break;

    case 'M Sm3':
      // M Sm3 => Barrels
      $normalizedValue = $value * $million;
      $unit = 'Sm3';
      $normalized = TRUE;
      break;

    case 'Sm3':
      // Sm3 => Barrels
      $normalizedValue = $value ;
      $unit = 'Sm3';
      $normalized = TRUE;
      break;

    case 'Gj':
      $normalizedValue = $value / $gj_to_sm3;
      $unit = 'Sm3';
      $normalized = TRUE;
  }

  // Last try, let's try and see if it's a currency.
  $found_currency = FALSE;
  if ($rate_to_usd !== FALSE && !$normalized) {
    ctools_include('export');
    $allCurrencies = ctools_export_crud_load_all('currency');
    foreach ($allCurrencies as $code => $currency) {
      if ($code == strtoupper($unit)) {
        $found_currency = TRUE;
        break;
      }
    }
    if ($found_currency) {
      $normalizedValue = round($value / $rate_to_usd);
      $unit = 'USD';
    }
  }
  return $normalizedValue;
}

/**
 * Implements hook_update_dependencies().
 */
function eiti_migration_update_dependencies() {
  $dependencies['eiti_migration'][7004] = array(
    'eitientity_organisation' => 7002,
  );
  $dependencies['eiti_migration'][7005] = array(
    'eitientity_summary_data' => 7002,
  );
  return $dependencies;
}

/**
 * Check whether or not s3 is used as the public schema.
 *
 * @return bool
 */
function _eiti_migration_s3_is_public_schema() {
  return variable_get('s3fs_use_s3_for_public', FALSE);
}

/**
 * Create local temp file to use with functions that require local files.
 *
 * @param string $file
 *   Source file uri.
 *
 * @return string|false
 *   Temp file uri or false if failed.
 */
function _eiti_migration_s3_create_local_temp_file(string $file, string $temp_file_name) {
  return file_unmanaged_copy($file, $temp_file_name, FILE_EXISTS_REPLACE);
}

/**
 * Generate name to use for temp files.
 *
 * @param object $file
 *
 * @return string
 */
function _eiti_migration_s3_generate_temp_name(object $file) {
  $path_info = pathinfo($file->uri);
  return 'temporary://eiti_s3_temp_' . $path_info['filename'] . '_' . time() . '.' . $path_info['extension'];
}
