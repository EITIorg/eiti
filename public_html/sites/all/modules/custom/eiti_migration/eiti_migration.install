<?php

/**
 * Implements hook_install().
 */
function eiti_migration_install() {
  // Prepare our folders.
  $spreadsheets_path = 'public://spreadsheets';
  if (!file_exists($spreadsheets_path)) {
    drupal_mkdir($spreadsheets_path);
  }
  file_prepare_directory($spreadsheets_path);

  $spreadsheets_temporary_path = 'public://spreadsheets_temporary';
  if (!file_exists($spreadsheets_temporary_path)) {
    drupal_mkdir($spreadsheets_temporary_path);
  }
  file_prepare_directory($spreadsheets_temporary_path);

  $migrated_img = 'public://migrated_images';
  if (!file_exists($migrated_img)) {
    drupal_mkdir($migrated_img);
  }
  file_prepare_directory($migrated_img);

  $migrated_files = 'public://migrated_files';
  if (!file_exists($migrated_files)) {
    drupal_mkdir($migrated_files);
  }
  file_prepare_directory($migrated_files);
}

/**
 * Make sure all directories required for the migration exist.
 */
function eiti_migration_update_7001(&$sandbox) {
  // Prepare our folders.
  $spreadsheets_path = 'public://spreadsheets';
  if (!file_exists($spreadsheets_path)) {
    drupal_mkdir($spreadsheets_path);
  }
  file_prepare_directory($spreadsheets_path);

  $spreadsheets_temporary_path = 'public://spreadsheets_temporary';
  if (!file_exists($spreadsheets_temporary_path)) {
    drupal_mkdir($spreadsheets_temporary_path);
  }
  file_prepare_directory($spreadsheets_temporary_path);

  $migrated_img = 'public://migrated_images';
  if (!file_exists($migrated_img)) {
    drupal_mkdir($migrated_img);
  }
  file_prepare_directory($migrated_img);
}

/**
 * Make sure all directories required for the migration exist.
 */
function eiti_migration_update_7002(&$sandbox) {
  $migrated_files = 'public://migrated_files';
  if (!file_exists($migrated_files)) {
    drupal_mkdir($migrated_files);
  }
  file_prepare_directory($migrated_files);
}

/**
 * Clean up commodities.
 */
function eiti_migration_update_7003(&$sandbox) {
  drupal_set_time_limit(3600); // 1 hour.
  // Sector information has been imported as commodities, there are a lot of duplicates and none of them are linked with any organisations
  // so it should be a good idea to delete and later properly (re)import them all.
  if (!isset($sandbox['progress'])) {
    $vocabulary = taxonomy_vocabulary_machine_name_load('company_commodities');
    $commodity_ids = db_select('taxonomy_term_data', 'td')
      ->condition('td.vid', $vocabulary->vid)
      ->fields('td', array('tid'))
      ->execute()
      ->fetchCol();

    $sandbox['progress'] = 0;
    $sandbox['max'] = count($commodity_ids);
    $sandbox['commodity_ids'] = $commodity_ids;
  }

  if ($sandbox['commodity_ids']) {
    // Delete in batches of 500.
    $delete = array();
    foreach ($sandbox['commodity_ids'] as $key => $id) {
      $delete[] = $id;
      unset($sandbox['commodity_ids'][$key]);
      $sandbox['progress']++;
      if ($key > 0 && $key % 500 == 0) {
        entity_delete_multiple('taxonomy_term', $delete);
        $delete = array();
        break;
      }
    }
    // Delete any leftovers.
    if ($delete) {
      entity_delete_multiple('taxonomy_term', $delete);
    }
  }

  if ($sandbox['progress'] >= $sandbox['max']) {
    $sandbox['#finished'] = TRUE;
  }
  else {
    $sandbox['#finished'] = ($sandbox['progress'] / $sandbox['max']);
  }
}

/**
 * Import missing organisation data from existing summary data Excel files.
 */
function eiti_migration_update_7004(&$sandbox) {
  drupal_set_time_limit(3600); // 1 hour.
  // Existing Excel migration functionality doesn't look like a good working fit
  // for a small-scale update of all existing companies so we handle this separately.
  // Based on functionality from eiti_migration.companies.inc, eiti_migration.spreadsheet.inc files.
  if (!isset($sandbox['progress'])) {
    // We'll keep the progress saved in a variable so it can be restarted where it left off if such a need arises.
    $summary_data = variable_get('eiti_migration_temp_summary_data', FALSE);

    if (!$summary_data) {
      $summary_data = db_select('eiti_summary_data', 'sd');
      $summary_data->innerJoin('field_data_field_sd_report_file', 'sd_rf', 'sd.id = sd_rf.entity_id');
      $summary_data->innerJoin('file_managed', 'fm', 'sd_rf.field_sd_report_file_fid = fm.fid');
      $summary_data->fields('sd', array('id', 'country_id'))
        ->fields('fm', array('uri'))
        ->orderBy('id', 'ASC');
      $summary_data =  $summary_data->execute()->fetchAll();
      variable_set('eiti_migration_temp_summary_data', $summary_data);
    }

    $sandbox['progress'] = 0;
    $sandbox['max'] = count($summary_data);
    $sandbox['summary_data'] = $summary_data;
  }

  if ($sandbox['summary_data']) {
    $limit = 10;
    $counter = 0;
    libraries_load('PHPExcel');
    foreach ($sandbox['summary_data'] as $sd_key => $sd) {
      $counter++;
      if (file_exists($sd->uri)) {
        watchdog('eiti_migration', 'Summary data ' . $sd->id . ' company updates start.');

        $summary_source_id = db_select('migrate_map_eitisummarydatamigration', 'sm')
          ->condition('sm.destid1', $sd->id)
          ->fields('sm', array('sourceid1'))
          ->execute()
          ->fetchField();
        $org_ids = db_select('migrate_map_eiticompaniesmigration', 'cm')
          ->condition('cm.sourceid1', db_like($summary_source_id . ':') . '%', 'LIKE')
          ->isNotNull('cm.destid1')
          ->fields('cm', array('destid1'))
          ->execute()
          ->fetchCol();
        $orgs = array();
        if ($org_ids) {
          $orgs = entity_load('organisation', $org_ids);
        }

        $file_path = drupal_realpath($sd->uri);
        $type = PHPExcel_IOFactory::identify($file_path);
        $reader = PHPExcel_IOFactory::createReader($type);
        $reader->setReadDataOnly(TRUE);
        $reader->setLoadAllSheets();
        $excel = $reader->load($file_path);
        $revenuesSheet = eiti_migration_getSheet($excel, 'revenues');

        if ($orgs && !empty($revenuesSheet)) {
          // Now let's parse the file.
          $highestColumn = $revenuesSheet->getHighestColumn();
          $highestColumnIndex = PHPExcel_Cell::columnIndexFromString($highestColumn);

          // Defaults.
          $start_row = 3;
          $start_column = 8;

          // Find the "Companies" (Adjusting defaults).
          if ($position = eiti_migration_findPositionInSheet($revenuesSheet, array('c. companies', 'companies'))) {
            $value = trim($revenuesSheet->getCellByColumnAndRow($position['column'], $position['row'] + 1)->getValue());
            if (strtolower($value) == 'legal name') {
              $start_row = $position['row'] + 1;
            }
            else {
              $value = trim($revenuesSheet->getCellByColumnAndRow($position['column'], $position['row'] + 2)->getValue());
              if (strtolower($value) == 'legal name') {
                $start_row = $position['row'] + 2;
              }
            }
            $start_column = $position['column'] + 1;
          }

          // Newer Excel files have sector before commodities.
          $commodity_row = $start_row + 2;
          $sector_row = FALSE;
          $value = trim($revenuesSheet->getCellByColumnAndRow($position['column'], $start_row + 2)->getValue());
          if (strtolower($value) == 'sector') {
            $sector_row = $commodity_row;
            $commodity_row = $commodity_row + 1;
          }

          // Now let's walk through the right cells.
          for ($column = $start_column; $column < $highestColumnIndex; $column++) {
            $nameCellValue = trim($revenuesSheet->getCellByColumnAndRow($column, $start_row)->getValue());
            $idCellValue = trim($revenuesSheet->getCellByColumnAndRow($column, $start_row + 1)->getFormattedValue());
            if ($sector_row !== FALSE) {
              $sectorCell = $revenuesSheet->getCellByColumnAndRow($column, $sector_row);
              if ($sectorCell->isFormula()) {
                $sectorCellValue = $sectorCell->getFormattedValue();
              }
              else {
                $sectorCellValue = $sectorCell->getValue();
              }
            }
            $commoditiesCell = $revenuesSheet->getCellByColumnAndRow($column, $commodity_row);
            if ($commoditiesCell->isFormula()) {
              $commoditiesCellValue = $commoditiesCell->getFormattedValue();
            }
            else {
              $commoditiesCellValue = $commoditiesCell->getValue();
            }

            if (!empty($nameCellValue)) {
              foreach ($orgs as $org_key => $org) {
                if ($org->type == 'company' && $org->name === $nameCellValue) {
                  if (!eiti_migration_checkEmptyValue($idCellValue)) {
                    $org->identification_number = $idCellValue;
                  }
                  $org->summary_data_id = $sd->id;
                  if (isset($sectorCellValue) && !eiti_migration_checkEmptyValue($sectorCellValue)) {
                    $sector_tid = eiti_migration_get_sector_tid($sectorCellValue);
                    if ($sector_tid) {
                      $org->field_o_sector = array();
                      $org->field_o_sector['und'][0]['target_id'] = $sector_tid;
                    }
                  }
                  if (!eiti_migration_checkEmptyValue($commoditiesCellValue)) {
                    $commodity_tids = eiti_migration_get_commodity_tids($commoditiesCellValue);
                    if ($commodity_tids) {
                      $org->field_o_commodities = array();
                      foreach ($commodity_tids as $commodity_tid) {
                        $org->field_o_commodities['und'][]['target_id'] = $commodity_tid;
                      }
                    }
                  }
                  // entity_save is too slow, problematic so we handle things manually (based on save() in entity.controller.inc).
                  //entity_save('organisation', $org);
                  field_attach_update('organisation', $org);
                  drupal_write_record('eiti_organisation', $org, 'id');
                  unset($orgs[$org_key]);
                  break;
                }
              }
            }
            else {
              // There should be no more companies.
              break;
            }
          }
        }
        // Free up memory.
        $excel->disconnectWorksheets();
        $excel->garbageCollect();
        unset($excel);
      }
      $sandbox['progress']++;
      unset($sandbox['summary_data'][$sd_key]);
      variable_set('eiti_migration_temp_summary_data', $sandbox['summary_data']);
      if ($counter >= $limit) {
        break;
      }
    }
  }

  if ($sandbox['progress'] >= $sandbox['max']) {
    $sandbox['#finished'] = TRUE;
    variable_del('eiti_migration_temp_summary_data');
  }
  else {
    $sandbox['#finished'] = ($sandbox['progress'] / $sandbox['max']);
  }
}

/**
 * Import missing company identifier information.
 */
function eiti_migration_update_7005(&$sandbox) {
  drupal_set_time_limit(3600); // 1 hour.
  if (!isset($sandbox['progress'])) {
    // We'll keep the progress saved in a variable so it can be restarted where it left off if such a need arises.
    $summary_data = variable_get('eiti_migration_temp_summary_data', FALSE);

    if (!$summary_data) {
      $summary_data = db_select('eiti_summary_data', 'sd');
      $summary_data->innerJoin('field_data_field_sd_report_file', 'sd_rf', 'sd.id = sd_rf.entity_id');
      $summary_data->innerJoin('file_managed', 'fm', 'sd_rf.field_sd_report_file_fid = fm.fid');
      $summary_data->fields('sd', array('id'))
        ->fields('fm', array('uri'))
        ->orderBy('id', 'ASC');
      $summary_data =  $summary_data->execute()->fetchAll();
      variable_set('eiti_migration_temp_summary_data', $summary_data);
    }

    $sandbox['progress'] = 0;
    $sandbox['max'] = count($summary_data);
    $sandbox['summary_data'] = $summary_data;
  }

  if ($sandbox['summary_data']) {
    $limit = 100;
    $counter = 0;
    libraries_load('PHPExcel');
    foreach ($sandbox['summary_data'] as $sd_key => $sd) {
      $counter++;
      if (file_exists($sd->uri)) {
        watchdog('eiti_migration', 'Summary data ' . $sd->id . ' update start.');

        $file_path = drupal_realpath($sd->uri);
        $type = PHPExcel_IOFactory::identify($file_path);
        $reader = PHPExcel_IOFactory::createReader($type);
        $reader->setReadDataOnly(TRUE);
        $reader->setLoadAllSheets();
        $excel = $reader->load($file_path);
        $revenuesSheet = eiti_migration_getSheet($excel, 'revenues');

        if (!empty($revenuesSheet)) {
          // eiti_migration_findPositionInSheet can run into out of memory issues with no row/col limits.
          $id_position = eiti_migration_findPositionInSheet($revenuesSheet, array('Company identifier name/source'), NULL, 10, 10);
          if ($id_position) {
            $name = trim($revenuesSheet->getCellByColumnAndRow($id_position['column'], $id_position['row'] + 1)->getValue());
            $register = trim($revenuesSheet->getCellByColumnAndRow($id_position['column'], $id_position['row'] + 2)->getValue());
            $register_url = trim($revenuesSheet->getCellByColumnAndRow($id_position['column'], $id_position['row'] + 3)->getValue());

            $update_fields = array();
            if (!eiti_migration_checkEmptyValue($name)) {
              $update_fields['company_id_name'] = $name;
            }
            if (!eiti_migration_checkEmptyValue($register)) {
              $update_fields['company_id_register'] = $register;
            }
            if (!eiti_migration_checkEmptyValue($register_url)) {
              $update_fields['company_id_register_url'] = $register_url;
            }

            if ($update_fields) {
              // We're doing a direct/fast save for performance reasons (there should be no unwanted side-effects).
              db_update('eiti_summary_data')
                ->fields($update_fields)
                ->condition('id', $sd->id)
                ->execute();
            }
          }
        }

        // Free up memory.
        $excel->disconnectWorksheets();
        $excel->garbageCollect();
        unset($excel);
      }
      $sandbox['progress']++;
      unset($sandbox['summary_data'][$sd_key]);
      variable_set('eiti_migration_temp_summary_data', $sandbox['summary_data']);
      if ($counter >= $limit) {
        break;
      }
    }
  }

  if ($sandbox['progress'] >= $sandbox['max']) {
    $sandbox['#finished'] = TRUE;
    variable_del('eiti_migration_temp_summary_data');
  }
  else {
    $sandbox['#finished'] = ($sandbox['progress'] / $sandbox['max']);
  }
}

/**
 * Fix some indicators and delete related indicator values.
 */
function eiti_migration_update_7006(&$sandbox) {
  drupal_set_time_limit(3600); // 1 hour.
  $indicator_name = 'If yes, what was the total revenue received?';
  // Change faulty boolean indicators to numeric.
  db_update('eiti_indicator')
    ->fields(array('type' => 'numeric'))
    ->condition('name', $indicator_name)
    ->execute();

  // Get all related broken indicator value id-s.
  $ids = db_select('eiti_indicator_value', 'iv');
  $ids->innerJoin('eiti_indicator', 'i', 'iv.indicator_id = i.id');
  $ids->condition('name', $indicator_name);
  $ids->fields('iv', array('id'));
  $ids = $ids->execute()->fetchCol();

  if ($ids) {
    // Migration cleanup.
    $source_ids = db_select('migrate_map_eitiindicatorvaluesmigration', 'ivm');
    $source_ids->condition('destid1', $ids, 'IN');
    $source_ids->fields('ivm', array('sourceid1'));
    $source_ids = $source_ids->execute()->fetchCol();
    if ($source_ids) {
      db_delete('migrate_message_eitiindicatorvaluesmigration')
        ->condition('sourceid1', $source_ids, 'IN')
        ->execute();
    }
    db_delete('migrate_map_eitiindicatorvaluesmigration')
      ->condition('destid1', $ids, 'IN')
      ->execute();

    // Summary data relationship cleanup.
    $ids_for_sd = array_combine($ids, $ids);
    foreach ($ids_for_sd as $key => $id) {
      $sd_id = db_select('field_data_field_sd_indicator_values', 'sd_iv');
      $sd_id->condition('field_sd_indicator_values_target_id', $id);
      $sd_id->fields('sd_iv', array('entity_id'));
      $sd_id = $sd_id->execute()->fetchField();
      if ($sd_id) {
        $summary_data = entity_load_single('summary_data', $sd_id);
        if (isset($summary_data->field_sd_indicator_values['und'][0]['target_id'])) {
          foreach ($summary_data->field_sd_indicator_values['und'] as $iv_key => $value) {
            if (isset($ids_for_sd[$value['target_id']])) {
              unset($summary_data->field_sd_indicator_values['und'][$iv_key]);
            }
          }
          entity_save('summary_data', $summary_data);
        }
      }
    }

    // Entity cleanup.
    // Delete in batches of 100.
    $delete = array();
    foreach ($ids as $key => $id) {
      $delete[] = $id;
      if ($key > 0 && $key % 100 == 0) {
        entity_delete_multiple('indicator_value', $delete);
        $delete = array();
      }
    }
    // Delete any leftovers.
    if ($delete) {
      entity_delete_multiple('indicator_value', $delete);
    }
  }

}

/**
 * Import indicator values that were broken or missing.
 */
function eiti_migration_update_7007(&$sandbox) {
  drupal_set_time_limit(3600); // 1 hour.
  if (!isset($sandbox['progress'])) {
    // We'll keep the progress saved in a variable so it can be restarted where it left off if such a need arises.
    $summary_data = variable_get('eiti_migration_temp_summary_data', FALSE);

    if (!$summary_data) {
      $summary_data = db_select('eiti_summary_data', 'sd');
      $summary_data->innerJoin('field_data_field_sd_report_file', 'sd_rf', 'sd.id = sd_rf.entity_id');
      $summary_data->innerJoin('file_managed', 'fm', 'sd_rf.field_sd_report_file_fid = fm.fid');
      $summary_data->fields('sd', array('id'))
        ->fields('fm', array('uri'))
        ->orderBy('id', 'ASC');
      $summary_data =  $summary_data->execute()->fetchAll();
      variable_set('eiti_migration_temp_summary_data', $summary_data);
    }

    $sandbox['progress'] = 0;
    $sandbox['max'] = count($summary_data);
    $sandbox['summary_data'] = $summary_data;
  }

  if ($sandbox['summary_data']) {
    $limit = 10;
    $counter = 0;
    libraries_load('PHPExcel');

    $groups = eitientity_indicator_get_by_bundle('group');
    $numerics = eitientity_indicator_get_by_bundle('numeric');
    $valid_indicators = array();
    foreach ($numerics as $numeric) {
      if ($numeric->name === 'If yes, what was the total revenue received?') {
        $valid_indicators[$numeric->id] = $numeric;
      }
    }

    foreach ($sandbox['summary_data'] as $sd_key => $sd) {
      $counter++;
      if (file_exists($sd->uri)) {
        watchdog('eiti_migration', 'Summary data ' . $sd->id . ' update start.');

        $file_path = drupal_realpath($sd->uri);
        $type = PHPExcel_IOFactory::identify($file_path);
        $reader = PHPExcel_IOFactory::createReader($type);
        $reader->setReadDataOnly(TRUE);
        $reader->setLoadAllSheets();
        $excel = $reader->load($file_path);
        $contextualSheet = eiti_migration_getSheet($excel, 'context');

        if (!empty($contextualSheet)) {
          $summary_data = entity_load_single('summary_data', $sd->id);
          $summary_data_emw = entity_metadata_wrapper('summary_data', $summary_data);
          $rate_to_usd = $summary_data_emw->currency_rate->value();
          $summary_source_id = db_select('migrate_map_eitisummarydatamigration', 'sm')
            ->condition('sm.destid1', $sd->id)
            ->fields('sm', array('sourceid1'))
            ->execute()
            ->fetchField();

          // Now let's parse the file.
          $highestRow = $contextualSheet->getHighestRow();

          // Defaults.
          $start_row = 4;
          $start_column = 1;

          // Find the "Entry" and break out (Adjusting defaults).
          // Find the "Entry" (Adjusting defaults).
          if ($position = eiti_migration_findPositionInSheet($contextualSheet, array('Entry'))) {
            $start_row = $position['row'] + 1;
            $start_column = $position['column'] - 2;
          }

          // Also we have to make sure that there's a "Unit" column.
          $unitColumnFound = (eiti_migration_findPositionInSheet($contextualSheet, array('unit')) !== FALSE);
          if (!$unitColumnFound) {
            continue;
          }

          // Now let's walk through the right cells.
          $lastRememberedGroup = '';
          for ($row = $start_row; $row < $highestRow; $row++) {
            $groupCellValue = trim($contextualSheet->getCellByColumnAndRow($start_column, $row)->getValue());
            $subgroupCellValue = trim($contextualSheet->getCellByColumnAndRow($start_column + 1, $row)->getValue());
            $unitCellValue = trim($contextualSheet->getCellByColumnAndRow($start_column + 3, $row)->getValue());
            $sourceCellValue = trim($contextualSheet->getCellByColumnAndRow($start_column + 4, $row)->getValue());
            $commentCellValue = trim($contextualSheet->getCellByColumnAndRow($start_column + 5, $row)->getValue());
            $valueCell = $contextualSheet->getCellByColumnAndRow($start_column + 2, $row);
            if ($valueCell->isFormula()) {
              $valueCellValue = trim($valueCell->getFormattedValue());
            }
            else {
              $valueCellValue = trim($valueCell->getValue());
            }
            if (strpos($valueCellValue, ',') !== FALSE) {
              $valueCellValue = str_replace(',', '.', $valueCellValue);
            }

            // Before we do the lookup, let's make sure that the group is correct.
            // If it's empty (or "add rows ..."), we use the previous group-value.
            if ($groupCellValue == '' || (stripos($groupCellValue, 'modify entry') !== FALSE)
              || (stripos($groupCellValue, 'add rows') !== FALSE)
              || (stripos($groupCellValue, 'add/remove') !== FALSE)) {
              $groupCellValue = $lastRememberedGroup;
            }
            else {
              $lastRememberedGroup = $groupCellValue;
            }

            if (!is_numeric($valueCellValue) || !$groupCellValue) {
              continue;
            }

            // Make sure that this indicator qualifies for fixing.
            $group_id = eiti_migration_findBestMatch($groupCellValue, $groups);
            $indicators_in_group = array();
            foreach ($valid_indicators as $id => $indicator) {
              if ($indicator->parent == $group_id) {
                $indicators_in_group[$id] = $indicator;
              }
            }
            if (!$indicators_in_group) {
              continue;
            }
            $indicator_id = eiti_migration_findBestMatch($subgroupCellValue, $indicators_in_group);

            // Save necessary information.
            if ($indicator_id) {
              // Entity.
              $indicator_value = array();
              $indicator_value['indicator_id'] = $indicator_id;
              $indicator_value['value_unit'] = eiti_migration_normalizeUnit($unitCellValue);
              $indicator_value['value_numeric'] = eiti_migration_normalizeValue($valueCellValue, $indicator_value['value_unit'], $rate_to_usd);
              $indicator_value['original_value_numeric'] = $valueCellValue;
              $indicator_value['original_value_unit'] = $indicator_value['value_unit'];
              $indicator_value['source'] = $sourceCellValue;
              $indicator_value['comments'] = $commentCellValue;
              $entity = entity_create('indicator_value', $indicator_value);
              $saved = entity_save('indicator_value', $entity);

              if ($saved) {
                // Migration relationship.
                $source_id = $summary_source_id . ':' . $row;
                db_delete('migrate_map_eitiindicatorvaluesmigration')
                  ->condition('sourceid1', $source_id)
                  ->execute();
                db_insert('migrate_map_eitiindicatorvaluesmigration')
                  ->fields(array(
                    'sourceid1' => $source_id,
                    'destid1' => $entity->id,
                  ))
                  ->execute();
                // Summary data relationship.
                $summary_data_emw->field_sd_indicator_values[] = $entity->id;
              }
            }
          }
          $summary_data_emw->save();
        }

        // Free up memory.
        $excel->disconnectWorksheets();
        $excel->garbageCollect();
        unset($excel);
      }
      $sandbox['progress']++;
      unset($sandbox['summary_data'][$sd_key]);
      variable_set('eiti_migration_temp_summary_data', $sandbox['summary_data']);
      if ($counter >= $limit) {
        break;
      }
    }
  }

  if ($sandbox['progress'] >= $sandbox['max']) {
    $sandbox['#finished'] = TRUE;
    variable_del('eiti_migration_temp_summary_data');
  }
  else {
    $sandbox['#finished'] = ($sandbox['progress'] / $sandbox['max']);
  }
}
