<?php
/**
 * @file
 * eitiet_summary_data.install
 */

/**
 * Fix type for existing indicators.
 */
function eitiet_summary_data_update_7001(&$sandbox) {
  // Here is where we just want to update the existing indicators.
  $indicators_to_text = array(
    'Public registry of licences, oil',
    'Public registry of licences, mining',
  );

  $query = db_update('eiti_indicator');
  $query->fields(array(
    'type' => 'text',
  ));
  $query->condition('name', $indicators_to_text, 'IN');
  $query->execute();
}

/**
 * Add missing indicators.
 */
function eitiet_summary_data_update_7002(&$sandbox) {
  // Create the indicator group.
  $external_indicator_group = "External indicators";
  $values = array(
    'status' => NODE_PUBLISHED,
    'created' => REQUEST_TIME,
    'type' => 'group',
    'name' => $external_indicator_group,
  );
  /** @var IndicatorEntity $indicator */
  $indicator = entity_create('indicator', $values);
  $indicator->save();
  $group_id = $indicator->id;

  // Create all other indicators.
  $external_indicators = array(
    "Extractives",
    "GDP",
    "Aid",
    "FDI",
    "Remittances",
    "Total Gov Revenue"
  );
  foreach ($external_indicators as $external_indicator) {
    $values = array(
      'status' => NODE_PUBLISHED,
      'created' => REQUEST_TIME,
      'type' => 'numeric',
      'name' => $external_indicator,
      'parent' => $group_id,
    );
    /** @var IndicatorEntity $indicator */
    $indicator = entity_create('indicator', $values);
    $indicator->save();
  }
}

/**
 * Add missing indicators.
 */
function eitiet_summary_data_update_7004(&$sandbox) {
  $new_indicators = array();

  $query = new EntityFieldQuery();
  $matched = $query
    ->entityCondition('entity_type', 'indicator')
    ->propertyCondition('type', 'group')
    ->propertyCondition('name', 'Production volume and value (3.5.a)')
    ->execute();
  if (!empty($matched['indicator'])) {
    $group_entity = reset($matched['indicator']);

    $new_indicators[] = array(
      'name' => "Copper, volume",
      'parent' => $group_entity->id,
      'type' => "numeric",
    );
    $new_indicators[] = array(
      'name' => "Gold, volume",
      'parent' => $group_entity->id,
      'type' => "numeric",
    );
    $new_indicators[] = array(
      'name' => "Coal, volume",
      'parent' => $group_entity->id,
      'type' => "numeric",
    );
  }

  $query = new EntityFieldQuery();
  $matched = $query
    ->entityCondition('entity_type', 'indicator')
    ->propertyCondition('type', 'group')
    ->propertyCondition('name', 'Export volume and value (3.5.b)')
    ->execute();
  if (!empty($matched['indicator'])) {
    $group_entity = reset($matched['indicator']);

    $new_indicators[] = array(
      'name' => "Copper, volume",
      'parent' => $group_entity->id,
      'type' => "numeric",
    );
    $new_indicators[] = array(
      'name' => "Gold, volume",
      'parent' => $group_entity->id,
      'type' => "numeric",
    );
    $new_indicators[] = array(
      'name' => "Coal, volume",
      'parent' => $group_entity->id,
      'type' => "numeric",
    );
  }

  /* Loop and create the values */
  foreach ($new_indicators as $new_indicator) {
    $query = new EntityFieldQuery();
    $matched = $query
      ->entityCondition('entity_type', 'indicator')
      ->propertyCondition('type', $new_indicator['type'])
      ->propertyCondition('name', $new_indicator['name'])
      ->propertyCondition('parent', $new_indicator['parent'])
      ->execute();
    if (!empty($matched['indicator'])) {
      continue;
    }

    $new_indicator_values = array(
        'status' => NODE_PUBLISHED,
        'created' => REQUEST_TIME,
      ) + $new_indicator;

    /** @var IndicatorEntity $new_entity */
    $new_entity = entity_create('indicator', $new_indicator_values);
    $new_entity->save();
  }
}
